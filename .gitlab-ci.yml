#s2i:2

stages:
  - code-check
  - artifact-docker-build
  - deploy-env
  - artifact-release
  - src-release
#####
code-check:
  stage: code-check
  script:
    - gitlab-ci-check
  except:
    - tags
#####
artifact-docker-build:
  stage: artifact-docker-build
  script:
    - git-merge-master
    - s2i . artifact
    - s2i . docker
  except:
    - tags
    - master
  artifacts:
    when: on_success
    expire_in: 24h
    paths:
      - .s2i/
artifact-docker-build-master:
  stage: artifact-docker-build
  script:
    - s2i . artifact
    - s2i . docker
  only:
    - master
    - hotfix/*
  artifacts:
    when: on_success
    name: ${CI_PROJECT_NAME}-${CI_JOB_STAGE}
    expire_in: 24h
    paths:
      - .s2i/
#####
deploy-to-dev:
  stage: deploy-env
  script:
     - export K8S_KUBECONFIG=${K8S_KUBECONFIG_DEV:-${K8S_KUBECONFIG:-"/root/.kube/config"}}
     - export K8S_NS_SUFFIX=${K8S_NS_SUFFIX_DEV:-${K8S_NS_SUFFIX:-"-dev"}}
     - export K8S_NS="" # nil will auto naming namespace
     - export K8S_DOMAIN_INTERNAL=${K8S_DOMAIN_INTERNAL_DEV:-${K8S_DOMAIN_INTERNAL}}
     - export K8S_DOMAIN_PUBLIC=${K8S_DOMAIN_PUBLIC_DEV:-${K8S_DOMAIN_PUBLIC}}
     - export INGRESS_INTERNAL_ENABLED=${INGRESS_INTERNAL_ENABLED_DEV:-${INGRESS_INTERNAL_ENABLED}}
     - export INGRESS_CLASS_INTERNAL=${INGRESS_CLASS_INTERNAL_DEV:-${INGRESS_CLASS_INTERNAL}}
     - export INGRESS_CLASS_PUBLIC=${INGRESS_CLASS_PUBLIC_DEV:-${INGRESS_CLASS_PUBLIC}}
     - s2i . deploy
     - deploy-dev-post
  only:
    - /^rc.*$/
    - /^bugfix.*$/
    - /^feature.*$/
    - /^dev.*$/
  except:
    - master
    - /^hotfix.*$/
  dependencies: []
deploy-to-test:
  stage: deploy-env
  when: manual
  script:
     - export K8S_KUBECONFIG=${K8S_KUBECONFIG_TEST:-${K8S_KUBECONFIG:-"/root/.kube/config"}}
     - export K8S_NS_SUFFIX=${K8S_NS_SUFFIX_TEST:-${K8S_NS_SUFFIX:-"-test"}}
     - export K8S_NS="" # nil will auto naming namespace
     - export K8S_DOMAIN_INTERNAL=${K8S_DOMAIN_INTERNAL_TEST:-${K8S_DOMAIN_INTERNAL}}
     - export K8S_DOMAIN_PUBLIC=${K8S_DOMAIN_PUBLIC_TEST:-${K8S_DOMAIN_PUBLIC}}
     - export INGRESS_INTERNAL_ENABLED=${INGRESS_INTERNAL_ENABLED_TEST:-${INGRESS_INTERNAL_ENABLED}}
     - export INGRESS_CLASS_INTERNAL=${INGRESS_CLASS_INTERNAL_TEST:-${INGRESS_CLASS_INTERNAL}}
     - export INGRESS_CLASS_PUBLIC=${INGRESS_CLASS_PUBLIC_TEST:-${INGRESS_CLASS_PUBLIC}}
     - s2i . deploy
     - deploy-test-post
  only:
    - /^rc.*$/
    - /^bugfix.*$/
    - /^feature.*$/
    - /^dev.*$/
  except:
    - master
    - /^hotfix.*$/
  dependencies: []
rollback-test-from-uat:
  stage: deploy-env
  when: manual
  script:
     - export K8S_KUBECONFIG=${K8S_KUBECONFIG_TEST:-${K8S_KUBECONFIG:-"/root/.kube/config"}}
     - export K8S_NS_SUFFIX=${K8S_NS_SUFFIX_TEST:-${K8S_NS_SUFFIX:-"-test"}}
     - export K8S_NS="" # nil will auto naming namespace
     - export K8S_DOMAIN_INTERNAL=${K8S_DOMAIN_INTERNAL_TEST:-${K8S_DOMAIN_INTERNAL}}
     - export K8S_DOMAIN_PUBLIC=${K8S_DOMAIN_PUBLIC_TEST:-${K8S_DOMAIN_PUBLIC}}
     - export INGRESS_INTERNAL_ENABLED=${INGRESS_INTERNAL_ENABLED_TEST:-${INGRESS_INTERNAL_ENABLED}}
     - export INGRESS_CLASS_INTERNAL=${INGRESS_CLASS_INTERNAL_TEST:-${INGRESS_CLASS_INTERNAL}}
     - export INGRESS_CLASS_PUBLIC=${INGRESS_CLASS_PUBLIC_TEST:-${INGRESS_CLASS_PUBLIC}}
     - echo TODO
  only:
    - /^rc.*$/
    - /^bugfix.*$/
    - /^feature.*$/
    - /^dev.*$/
  except:
    - master
    - /^hotfix.*$/
  dependencies: []
deploy-to-uat:
  stage: deploy-env
  when: manual
  script:
     - export K8S_KUBECONFIG=${K8S_KUBECONFIG_UAT:-${K8S_KUBECONFIG:-"/root/.kube/config"}}
     - export K8S_NS_SUFFIX=${K8S_NS_SUFFIX_UAT:-${K8S_NS_SUFFIX:-"-uat"}}
     - export K8S_NS="" # nil will auto naming namespace
     - export K8S_DOMAIN_INTERNAL=${K8S_DOMAIN_INTERNAL_UAT:-${K8S_DOMAIN_INTERNAL}}
     - export K8S_DOMAIN_PUBLIC=${K8S_DOMAIN_PUBLIC_UAT:-${K8S_DOMAIN_PUBLIC}}
     - export INGRESS_INTERNAL_ENABLED=${INGRESS_INTERNAL_ENABLED_UAT:-${INGRESS_INTERNAL_ENABLED}}
     - export INGRESS_CLASS_INTERNAL=${INGRESS_CLASS_INTERNAL_UAT:-${INGRESS_CLASS_INTERNAL}}
     - export INGRESS_CLASS_PUBLIC=${INGRESS_CLASS_PUBLIC_UAT:-${INGRESS_CLASS_PUBLIC}}
     - s2i . deploy
     - deploy-uat-post
  only:
    - master
    - /^hotfix.*$/
  dependencies: []
rollback-uat-from-prd:
  stage: deploy-env
  when: manual
  script:
     - export K8S_KUBECONFIG=${K8S_KUBECONFIG_UAT:-${K8S_KUBECONFIG:-"/root/.kube/config"}}
     - export K8S_NS_SUFFIX=${K8S_NS_SUFFIX_UAT:-${K8S_NS_SUFFIX:-"-uat"}}
     - export K8S_NS="" # nil will auto naming namespace
     - export K8S_DOMAIN_INTERNAL=${K8S_DOMAIN_INTERNAL_UAT:-${K8S_DOMAIN_INTERNAL}}
     - export K8S_DOMAIN_PUBLIC=${K8S_DOMAIN_PUBLIC_UAT:-${K8S_DOMAIN_PUBLIC}}
     - export INGRESS_INTERNAL_ENABLED=${INGRESS_INTERNAL_ENABLED_UAT:-${INGRESS_INTERNAL_ENABLED}}
     - export INGRESS_CLASS_INTERNAL=${INGRESS_CLASS_INTERNAL_UAT:-${INGRESS_CLASS_INTERNAL}}
     - export INGRESS_CLASS_PUBLIC=${INGRESS_CLASS_PUBLIC_UAT:-${INGRESS_CLASS_PUBLIC}}
     - s2i . deploy
     - deploy-uat-post
  only:
    - master
    - /^hotfix.*$/
  dependencies: []
mirror-to-prd:
  stage: deploy-env
  when: manual
  script:
     - export K8S_KUBECONFIG=${K8S_KUBECONFIG_PRD:-${K8S_KUBECONFIG:-"/root/.kube/config"}}
     - export K8S_NS_SUFFIX=${K8S_NS_SUFFIX_PRD:-${K8S_NS_SUFFIX:-"-prd"}}
     - export K8S_NS="" # nil will auto naming namespace
     - export K8S_DOMAIN_INTERNAL=${K8S_DOMAIN_INTERNAL_PRD:-${K8S_DOMAIN_INTERNAL}}
     - export K8S_DOMAIN_PUBLIC=${K8S_DOMAIN_PUBLIC_PRD:-${K8S_DOMAIN_PUBLIC}}
     - export INGRESS_INTERNAL_ENABLED=${INGRESS_INTERNAL_ENABLED_PRD:-${INGRESS_INTERNAL_ENABLED}}
     - export INGRESS_CLASS_INTERNAL=${INGRESS_CLASS_INTERNAL_PRD:-${INGRESS_CLASS_INTERNAL}}
     - export INGRESS_CLASS_PUBLIC=${INGRESS_CLASS_PUBLIC_PRD:-${INGRESS_CLASS_PUBLIC}}
     - s2i . deploy
     - deploy-prd-post
  only:
    - master
  dependencies: []
#####
src-mr-create:
  stage: src-release
  when: manual
  script:
     - gitlab-mr-create
  except:
    - master
    - /^hotfix.*$/
    - tags
  dependencies: []
gitlab-auto-merge:
  stage: src-release
  script:
     - gitlab-auto-merge
  only:
    - /^hotfix.*$/
  except:
    - tags
  dependencies: []
#####

artifact-release:
  stage: artifact-release
  when: manual
  script:
    - export IMG="$(head -n 1 .s2i/s2i.*img.txt)"
    - echo ${IMG}
    - perl -ni -e "s@${DOCKER_REPO}.+@${IMG}@g;print" runner/docker-compose.yaml
  except:
    - tags
    - master
  artifacts:
    when: on_success
    name: ${CI_PROJECT_NAME}-${CI_JOB_STAGE}
    expire_in: 24h
    paths:
      - runner/