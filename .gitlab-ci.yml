#s2i:2

stages:
  - code-check
  - artifact-docker-build
  - deploy-env
  - artifact-release
  - src-release
#####
code-check:
  stage: code-check
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - gitlab-ci-check
  after_script:
    - echo "ok"
  except:
    - tags
#####
artifact-docker-build:
  stage: artifact-docker-build
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - git-merge-master
    - s2i . artifact
    - s2i . docker
  after_script:
    - artifact-docker-build-post
  except:
    - tags
    - master
  artifacts:
    when: on_success
    expire_in: 24h
    paths:
      - .s2i/
artifact-docker-build-master:
  stage: artifact-docker-build
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - s2i . artifact
    - s2i . docker
  after_script:
    - artifact-docker-build-post
  only:
    - master
    - hotfix/*
  artifacts:
    when: on_success
    name: ${CI_PROJECT_NAME}-${CI_JOB_STAGE}
    expire_in: 24h
    paths:
      - .s2i/
#####
deploy-to-dev:
  stage: deploy-env
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - export S2E_ORG
    - export S2E_NS
    - export K8S_KUBECONFIG=${DEV_K8S_KUBECONFIG}
    - export K8S_NS_SUFFIX=${DEV_K8S_NS_SUFFIX}
    - export K8S_NS
    - export K8S_DOMAIN_INTERNAL=${DEV_K8S_DOMAIN_INTERNAL}
    - export K8S_DOMAIN_PUBLIC=${DEV_K8S_DOMAIN_PUBLIC}
    - export INGRESS_INTERNAL_ENABLED=${DEV_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_PUBLIC_ENABLED=${DEV_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_CLASS_INTERNAL=${DEV_INGRESS_CLASS_INTERNAL}
    - export INGRESS_CLASS_PUBLIC=${DEV_INGRESS_CLASS_PUBLIC}
    - s2i . deploy
  after_script:
    - deploy-dev-post
  except:
    - tags
    - master
  dependencies: []
deploy-to-test:
  stage: deploy-env
  when: manual
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - export S2E_ORG
    - export S2E_NS
    - export K8S_KUBECONFIG=${TEST_K8S_KUBECONFIG}
    - export K8S_NS_SUFFIX=${TEST_K8S_NS_SUFFIX}
    - export K8S_NS
    - export K8S_DOMAIN_INTERNAL=${TEST_K8S_DOMAIN_INTERNAL}
    - export K8S_DOMAIN_PUBLIC=${TEST_K8S_DOMAIN_PUBLIC}
    - export INGRESS_INTERNAL_ENABLED=${TEST_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_PUBLIC_ENABLED=${TEST_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_CLASS_INTERNAL=${TEST_INGRESS_CLASS_INTERNAL}
    - export INGRESS_CLASS_PUBLIC=${TEST_INGRESS_CLASS_PUBLIC}
    - s2i . deploy
  after_script:
    - deploy-test-post
  except:
    - tags
    - master
  dependencies: []
rollback-test-from-uat:
  stage: deploy-env
  when: manual
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - export S2E_ORG
    - export S2E_NS
    - export SRC_K8S_KUBECONFIG=${UAT_K8S_KUBECONFIG}
    - export SRC_K8S_NS
    - export SRC_K8S_NS_SUFFIX=${UAT_K8S_NS_SUFFIX}
    - export K8S_KUBECONFIG=${TEST_K8S_KUBECONFIG}
    - export K8S_NS_SUFFIX=${TEST_K8S_NS_SUFFIX}
    - export K8S_NS
    - export K8S_DOMAIN_INTERNAL=${TEST_K8S_DOMAIN_INTERNAL}
    - export K8S_DOMAIN_PUBLIC=${TEST_K8S_DOMAIN_PUBLIC}
    - export INGRESS_INTERNAL_ENABLED=${TEST_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_PUBLIC_ENABLED=${TEST_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_CLASS_INTERNAL=${TEST_INGRESS_CLASS_INTERNAL}
    - export INGRESS_CLASS_PUBLIC=${TEST_INGRESS_CLASS_PUBLIC}
    - k8s-app-mirror ${SRC_K8S_KUBECONFIG} ${K8S_KUBECONFIG}
  after_script:
    - rollback-test-post
  except:
    - tags
    - master
    - /^hotfix.*$/
  dependencies: []
deploy-to-uat:
  stage: deploy-env
  when: manual
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - export S2E_ORG
    - export S2E_NS
    - export K8S_KUBECONFIG=${UAT_K8S_KUBECONFIG}
    - export K8S_NS_SUFFIX=${UAT_K8S_NS_SUFFIX}
    - export K8S_NS
    - export K8S_DOMAIN_INTERNAL=${UAT_K8S_DOMAIN_INTERNAL}
    - export K8S_DOMAIN_PUBLIC=${UAT_K8S_DOMAIN_PUBLIC}
    - export INGRESS_INTERNAL_ENABLED=${UAT_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_PUBLIC_ENABLED=${UAT_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_CLASS_INTERNAL=${UAT_INGRESS_CLASS_INTERNAL}
    - export INGRESS_CLASS_PUBLIC=${UAT_INGRESS_CLASS_PUBLIC}
    - s2i . deploy
  after_script:
    - deploy-uat-post
  only:
    - master
    - /^hotfix.*$/
  dependencies: []
rollback-uat-from-prd:
  stage: deploy-env
  when: manual
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - export S2E_ORG
    - export S2E_NS
    - export SRC_K8S_KUBECONFIG=${PRD_K8S_KUBECONFIG}
    - export SRC_K8S_NS
    - export SRC_K8S_NS_SUFFIX=${PRD_K8S_NS_SUFFIX}
    - export K8S_KUBECONFIG=${UAT_K8S_KUBECONFIG}
    - export K8S_NS_SUFFIX=${UAT_K8S_NS_SUFFIX}
    - export K8S_NS
    - export K8S_DOMAIN_INTERNAL=${UAT_K8S_DOMAIN_INTERNAL}
    - export K8S_DOMAIN_PUBLIC=${UAT_K8S_DOMAIN_PUBLIC}
    - export INGRESS_INTERNAL_ENABLED=${UAT_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_PUBLIC_ENABLED=${UAT_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_CLASS_INTERNAL=${UAT_INGRESS_CLASS_INTERNAL}
    - export INGRESS_CLASS_PUBLIC=${UAT_INGRESS_CLASS_PUBLIC}
    - k8s-app-mirror ${SRC_K8S_KUBECONFIG} ${K8S_KUBECONFIG}
  after_script:
    - rollback-uat-post
  only:
    - master
    - /^hotfix.*$/
  dependencies: []
mirror-to-prd:
  stage: deploy-env
  when: manual
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - export S2E_ORG
    - export S2E_NS
    - export SRC_K8S_KUBECONFIG=${UAT_K8S_KUBECONFIG}
    - export SRC_K8S_NS
    - export SRC_K8S_NS_SUFFIX=${UAT_K8S_NS_SUFFIX}
    - export K8S_KUBECONFIG=${PRD_K8S_KUBECONFIG}
    - export K8S_NS_SUFFIX=${PRD_K8S_NS_SUFFIX}
    - export K8S_NS
    - export K8S_DOMAIN_INTERNAL=${PRD_K8S_DOMAIN_INTERNAL}
    - export K8S_DOMAIN_PUBLIC=${PRD_K8S_DOMAIN_PUBLIC}
    - export INGRESS_INTERNAL_ENABLED=${PRD_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_PUBLIC_ENABLED=${PRD_INGRESS_INTERNAL_ENABLED}
    - export INGRESS_CLASS_INTERNAL=${PRD_INGRESS_CLASS_INTERNAL}
    - export INGRESS_CLASS_PUBLIC=${PRD_INGRESS_CLASS_PUBLIC}
    - k8s-app-mirror ${SRC_K8S_KUBECONFIG} ${K8S_KUBECONFIG}
  after_script:
    - deploy-prd-post
  only:
    - master
  dependencies: []
#####
src-mr-create:
  stage: src-release
  when: manual
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - gitlab-mr-create
  except:
    - master
    - /^hotfix.*$/
    - tags
  dependencies: []
gitlab-auto-merge:
  stage: src-release
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - gitlab-auto-merge
  only:
    - /^hotfix.*$/
  except:
    - tags
  dependencies: []
#####

artifact-release:
  stage: artifact-release
  when: manual
  script:
    - set -o allexport;s2ectl exec du -d 1; touch s2ectl.env;source  s2ectl.env;set +o allexport
    - export IMG="$(head -n 1 .s2i/s2i.*img.txt)"
    - echo ${IMG}
    - cp -f $(which s2ectl) s2erunner/runner/tools
    - perl -ni -e "s@${DOCKER_REPO}.+@${IMG}@g;print" s2erunner/docker-compose.yaml s2emetricd/docker-compose.yaml
  except:
    - tags
    - master
  artifacts:
    when: on_success
    name: ${CI_PROJECT_NAME}-${CI_JOB_STAGE}
    expire_in: 24h
    paths:
      - s2erunner/
      - s2emetricd/