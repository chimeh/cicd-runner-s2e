#!/bin/bash -xv
#author: jimin.huang
#email: jimin.huang@benload.com

if [[ $# -ne 1 ]];then
    cat <<EOF
    usage:
    a build runner for java|nodejs|... source
    
    $(realpath $0)   /path/to/srctop
    
EOF
    exit 1
fi
echo "start build"
GAVE_SRC_TOP=$(realpath $1)
export NEXUS_REPO='http://maven-hh.nxengine.cn/repository/maven-public/'
export NEXUS_RELEASE='http://maven-hh.nxengine.cn/repository/maven-releases/'

#PAAS_SPEC_URL=http://git.nx-code.com/paas/specs.git

echo "PWD=$(realpath `pwd`)"
echo "##########################################"
env
echo "##########################################"
if [[ -z ${DOCKER_REPO} ]];then
    DOCKER_REPO=${DOCKER_REPO:-docker-hh.nxengine.cn}
fi
if [[ -z ${DOCKER_NS} ]];then
    DOCKER_NS=iov
fi

echo "DOCKER_REPO=${DOCKER_REPO}"
echo "DOCKER_NS=${DOCKER_NS}"


# try to guest java or nodejs
echo "auto try to detect java or nodejs source and its topdir"
DETECT_JAVA="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname pom.xml"
DETECT_NODEJS="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname package.json"
DETECT_DEFAULT_TOP="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname .TOP"
DETECT_DEFAULT_GIT="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname .git"
eval ${DETECT_JAVA}
eval ${DETECT_NODEJS}
if [[ -n $(eval ${DETECT_JAVA}) ]];then
    pom=`echo $(eval ${DETECT_JAVA}) | head -n 1`
    echo "detect SRC_TOP from file ${pom}"
    SRC_TOP=`echo $(realpath $(dirname ${pom})) | sort | head -n 1`
    SRC_TYPE=java
    SRC_VERSION=`mvn --file ${SRC_TOP} -q -N -Dexec.executable='echo'  -Dexec.args='${project.version}'  org.codehaus.mojo:exec-maven-plugin:1.3.1:exec | tail -n 1`
elif [[ -n $(eval ${DETECT_NODEJS}) ]];then
    echo "detect SRC_TOP from file ${package}"
    package=`echo $(eval ${DETECT_NODEJS}) | head -n 1`
    SRC_TOP=$(realpath $(dirname ${package}))
    SRC_TYPE=nodejs
    SRC_VERSION=$(cd ${SRC_TOP};npm run packageVersion |tail -n 1)
elif [[ -n $(eval ${DETECT_DEFAULT_GIT}) ]];then
    echo "detect SRC_TOP from file .TOP"
    topfile=`echo $(eval ${DETECT_DEFAULT_GIT}) | head -n 1 | awk '{print $1}'`
    SRC_TOP=`echo $(realpath $(dirname ${topfile})) | head -n 1`
    SRC_TYPE=none
    SRC_VERSION="$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
elif [[ -n $(eval ${DETECT_DEFAULT_TOP}) ]];then
    echo "detect SRC_TOP from file .TOP"
    topfile=`echo $(eval ${DETECT_DEFAULT_TOP}) | head -n 1 | awk '{print $1}'`
    SRC_TOP=`echo $(realpath $(dirname ${topfile})) | head -n 1`
    SRC_TYPE=none
    SRC_VERSION="v"
else
    echo "Error can't detect SRC_TOP !!!!"
fi
SRC_GIT_COMMIT_ID="-$(cd ${SRC_TOP};git rev-parse --short HEAD )"
if [[ -n ${TEAMCITY_GIT_PATH} ]];then
    echo "Teamcity CI"
    DOCKER_IMAGE_NAME=${TEAMCITY_BUILDCONF_NAME}
    BUILD_COUNTER="-t-${BUILD_NUMBER}"
elif [[ -n ${JENKINS_URL} ]];then
    echo "Jenkins CI"
    DOCKER_IMAGE_NAME="${JOB_NAME}"
    BUILD_COUNTER="-j-${BUILD_NUMBER}"
elif [[ -n ${GITLAB_CI} ]];then
    echo "GITLAB CI"
    DOCKER_IMAGE_NAME="${CI_PROJECT_NAME}"
    BUILD_COUNTER="-${CI_COMMIT_REF_SLUG}${SRC_GIT_COMMIT_ID}-g-${CI_BUILD_ID}"
else
    echo "can't detect name"
    DOCKER_IMAGE_NAME=$(basename $(realpath ${SRC_TOP}))
    BUILD_COUNTER="-1"
fi
echo "DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME}"
echo "BUILD_COUNTER=${BUILD_COUNTER}"

if [[ -z ${SRC_VERSION} ]]; then
    SRC_VERSION="cant-detect-version"
fi

if [[ -z ${SVCNAMES} ]];then
    SVCNAMES=${DOCKER_IMAGE_NAME}
fi
if [[ -z ${K8S_NS} ]];then
    K8S_NS=iov-dev
fi
echo "SVCNAMES=${DOCKER_IMAGE_NAME}"
echo " SVCNAMES=${DOCKER_NS}"


echo "SRC_TYPE=${SRC_TYPE}"
echo "SRC_TOP=${SRC_TOP}"
echo "SRC_VERSION=${SRC_VERSION}"
echo "SRC_GIT_COMMIT_ID=${SRC_GIT_COMMIT_ID}"
echo "##########################################"
ls -lh ${SRC_TOP}/*
echo "##########################################"
#PAAS_SPEC_TOP=${SRC_TOP}/.paas_spec
#rm -rf ${PAAS_SPEC_TOP}
#mkdir -p ${PAAS_SPEC_TOP}
#git clone ${PAAS_SPEC_URL} ${PAAS_SPEC_TOP}

echo "detect Dockerfile"
DETECT_DOCKERFILE="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname Dockerfile"
eval ${DETECT_DOCKERFILE}
if [[ -n $(eval ${DETECT_DOCKERFILE}) ]];then
    DOCKFILE=$(realpath `echo $(eval ${DETECT_DOCKERFILE})| head -n 1`)
    DOCKFILE_DIR=$(dirname ${DOCKFILE})
else
    echo "can't detect Dockerfile"
    exit -1
fi
egrep EXPOSE  -r ${DOCKFILE}
if [[ $? -ne 0 ]];then
    echo "EXPOSE 80" >>  ${DOCKFILE}
    echo "EXPOSE 8080" >>  ${DOCKFILE}
fi
DOCKER_URL=${DOCKER_REPO}/${DOCKER_NS}/${DOCKER_IMAGE_NAME}:${SRC_VERSION}${BUILD_COUNTER}
echo "DOCKFILE=${DOCKFILE}"
echo "DOCKFILE_DIR=${DOCKFILE_DIR}"
echo "DOCKER_URL=${DOCKER_URL}"

function do_nodejs_s2i()
{
        echo "soure2image begin, nodejs source, webpack, to docker image"
        pushd ${SRC_TOP}
        npm --registry=https://registry.npm.taobao.org \
            --cache=$HOME/.npm/.cache/cnpm \
            --disturl=https://npm.taobao.org/dist \
            --userconfig=$HOME/.cnpmrc install
         npm --registry=https://registry.npm.taobao.org \
            --cache=$HOME/.npm/.cache/cnpm \
            --disturl=https://npm.taobao.org/dist \
            --userconfig=$HOME/.cnpmrc run build
        popd
}
function do_java_s2i()
{
        echo "soure2image begin, java source, to jar, to docker image"
        pushd ${SRC_TOP}
        mvn clean package
}


case ${SRC_TYPE} in
    nodejs)
        do_nodejs_s2i
        ;;
    java)
        do_java_s2i
        ;;
    
    *)
        echo "node support source, or detect fail"
        ;;
    
esac

echo "##########################################"
echo "build docker image"
echo "DOCKFILE=${DOCKFILE}"
echo "DOCKER_URL=${DOCKER_URL}"
echo "DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME}:x${BUILD_COUNTER}"
echo "DOCKER_URL=${DOCKER_URL}"
echo "##########################################"
docker build -f ${DOCKFILE} -t ${DOCKER_IMAGE_NAME}:x${BUILD_COUNTER} ${SRC_TOP}
docker tag ${DOCKER_IMAGE_NAME}:x${BUILD_COUNTER} ${DOCKER_URL}

#k8s_templatemaker.py  -t deployment -i  ${DOCKER_URL} -n  ${DOCKER_IMAGE_NAME} > deployment.yaml
#k8s_templatemaker.py  -t service -i  ${DOCKER_URL} -n  ${DOCKER_IMAGE_NAME} > service.yaml
#kubectl apply -f deployment.yaml -n iov-dev
#kubectl apply -f services.yaml -n iov-dev


docker push ${DOCKER_URL}
docker rmi ${DOCKER_IMAGE_NAME}:x${BUILD_COUNTER}
for SVCNAME in ${SVCNAMES};do
    bash /data/icev3-helm-chart/helm-maker/script/helm-gen/mk-app-chart.sh ${DOCKER_URL} ${SVCNAME} ${K8S_NS} 8080 1
done
