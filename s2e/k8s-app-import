#!/bin/bash
#author huangjimin
#jimin.huang@nx-engine.com
#jimminh@163.com
#
echo "###########################################"
set -e
USAGE="
  $0, oneof cicd toolset, integrate rancher with kubernetes, deploy a img into NS ,auto generate deployment, ingress, service;
  export K8S_DOMAIN_INTERNAL=nxengine.cn
  export K8S_DOMAIN_PUBLIC=bu5-dev.tx
  export K8S_BLUE_POD_SFFIX=""
  export INGRESS_INTERNAL_ENABLED=1
  export INGRESS_PUBLIC_ENABLED=1
  export INGRESS_CLASS_INTERNAL=nginx
  export INGRESS_CLASS_PUBLIC=nginx
  usage: $(basename $(realpath $0))  IMG SVCNAME K8S_NS [PORTS: 80,8080,...] [K8S_AUTOCD:0|1] [DOMAIN_INTERNAL] [DOMAIN_PUBLIC]
  usage: $(basename $(realpath $0)) docker.io/nginx:latest nginx  default 80,8080  1 dev-k8s.tx e-engine.cn"
echo "${USAGE}"
echo "###########################################"

THIS_SCRIPT=$(realpath $(cd "$(dirname "${BASH_SOURCE:-$0}")"; pwd)/$(basename ${BASH_SOURCE:-$0}))
#automatic detection TOPDIR
SCRIPT_DIR=$(dirname $(realpath ${THIS_SCRIPT}))
TPLTOP=$(xdir=${SCRIPT_DIR};cd ${SCRIPT_DIR}; while /usr/bin/test ! -e .TOP ; do \
        xdir=`cd ../;pwd`;                       \
        if [ "$xdir" = "/" ] ; then             \
           echo  1>&2; \
           break;                              \
        fi ;                                    \
        cd $xdir;                               \
        done ;                                  \
        pwd;)

WORKDIR=$(realpath $(pwd))
if [[ -z ${TPLTOP} ]];then
TPLTOP=${WORKDIR}
fi

DEFAULT_NS="${S2E_ORG}${S2E_NS}"
if [[ -z ${DEFAULT_NS} ]];then
    DEFAULT_NS=$(echo ${CI_PROJECT_PATH} | awk -F"/" '{print $1$2}')
fi
if [[ -z ${DEFAULT_NS} ]];then
    DEFAULT_NS="default"
fi

if [[ $# -gt 5 ]];then
    DOMAIN_INTERNAL=$6
fi
if [[ $# -gt 6 ]];then
    DOMAIN_PUBLIC=$7
fi

if [[ -z ${DOMAIN_INTERNAL} ]];then
    DOMAIN_INTERNAL=okd.cd
fi
if [[ -z ${DOMAIN_PUBLIC} ]];then
    DOMAIN_PUBLIC=e-engine.cn
fi
if [[ -z ${INGRESS_CLASS_INTERNAL} ]];then
    INGRESS_CLASS_INTERNAL=nginx
fi
if [[ -z ${INGRESS_CLASS_PUBLIC} ]];then
    INGRESS_CLASS_PUBLIC=nginx
fi
if [[ -z ${INGRESS_INTERNAL_ENABLED} ]];then
    INGRESS_INTERNAL_ENABLED=true
fi
if [[ -z ${INGRESS_PUBLIC_ENABLED} ]];then
    INGRESS_PUBLIC_ENABLED=true
fi
####################################################################
CURDATE=$(date +%Y%m%d)
if [ $# -lt 3 ];then
  echo "${USAGE}"
  exit 1;
fi
IMG=$1
SVCNAME=$2
K8S_NS=$3
if [[ $# -gt 3 ]];then
    PORTS=$4
else
    PORTS=""
fi
if [[ $# -gt 4 ]];then
    K8S_AUTOCD=$5
else
    K8S_AUTOCD=$5
fi

CATALOG_NAME=$(echo ${SVCNAME} | tr '[A-Z]' '[a-z]')
VERSION=${CURDATE}${BUILD_COUNTER}
APPNAME=${WORKDIR}/${K8S_NS}-${SVCNAME}
VAULE_FILENAME=values-${SVCNAME}.yaml
COMMONCHARTVERSION=1.0
echo "IMG=${IMG}"
echo "SVCNAME=${SVCNAME}"
echo "K8S_NS=${K8S_NS}"
echo "K8S_AUTOCD=${K8S_AUTOCD}"
echo "CATALOG_NAME=${CATALOG_NAME}"
echo "VERSION=${VERSION}"
echo "APPNAME=${APPNAME}"
echo "VAULE_FILENAME=${VAULE_FILENAME}"
echo "COMMONCHARTVERSION=${COMMONCHARTVERSION}"
echo "THIS_SCRIPT=${THIS_SCRIPT}"
echo "SCRIPT_DIR=${SCRIPT_DIR}"
echo "WORKDIR=${WORKDIR}"
echo "TPLTOP=${TPLTOP}"
echo "DOMAIN_INTERNAL=${DOMAIN_INTERNAL}"
echo "DOMAIN_PUBLIC=${DOMAIN_PUBLIC}"
echo "KUBECONFIG=${KUBECONFIG}"

if [[ -n ${TEAMCITY_GIT_PATH} ]];then
    echo "Run on Teamcity"
    BUILD_COUNTER="-t${BUILD_NUMBER}"
elif [[ -n ${JENKINS_URL} ]];then
    echo "Run on Jenkins CI"
    BUILD_COUNTER="-j${BUILD_NUMBER}"
elif [[ -n ${GITLAB_CI} ]];then
    echo "Run on Gitlab CI"
    BUILD_COUNTER="-g${BUILD_NUMBER}"
else
    echo "Manual CI"
    BUILD_COUNTER=""
fi



mkdir -p ${APPNAME}/charts
cat > ${APPNAME}/Chart.yaml <<EOF
name: ${CATALOG_NAME}
version: ${VERSION}
appVersion: 1.0
description: gen helm for ${APPNAME}
keywords:
- ${SVCNAME}
home: https://www.nx-engine.com/
sources:
- https://www.nx-engine.com/
maintainers:
- name: Jimmy Huang
  email: jimagile@gmail.com
engine: gotpl
EOF

echo "#gen charts and depencies"
echo  'dependencies:' > ${APPNAME}/requirements.yaml
for i in ${SVCNAME};do \
    name=$i
    echo "gen ${name} charts"
    img=${IMG}
    /bin/cp -rf  ${TPLTOP}/generic/xxx-generic-chart ${APPNAME}/charts/$name
    if [[ -n ${K8S_NS} ]];then
       echo "get env.txt from ${K8S_NS} "
       touch ${APPNAME}/charts/${name}/env.txt.old
       set +e
       kubectl get -n ${K8S_NS} cm $name -o=jsonpath='{.data.env\.txt}' > ${APPNAME}/charts/${name}/env.txt.old
       set -e
       perl -ne "chomp(\$_);print ' ' x 0;print \$_;print qq(\n);" ${APPNAME}/charts/${name}/env.txt.old >> ${APPNAME}/charts/$name/files/env.txt
       echo ${GITLAB_USER_EMAIL} > ${APPNAME}/charts/$name/files/mail.txt
       rm -f ${APPNAME}/${name}/env.txt.old
    fi
    if [[ ${CICD_NS_RABC_ENABLED} -gt 0 ]];then
      /bin/cp -rf  ${APPNAME}/charts/$name/cicd-ns-rabc-templates/* ${APPNAME}/charts/$name/templates/
    fi
    perl -ni -e "s/^name:.+/name: ${name}/g;print" ${APPNAME}/charts/$name/Chart.yaml
    perl -ni -e "s/^version:.+/version: ${COMMONCHARTVERSION}/g;print" ${APPNAME}/charts/$name/Chart.yaml
    perl -ni -e "s/^icev3-xxx-generic/$name/g;print" ${APPNAME}/charts/$name/values-single.yaml
    perl -ni -e "s@image:.+@image: ${IMG}@g;print"  ${APPNAME}/charts/$name/values-single.yaml
cat >> ${APPNAME}/requirements.yaml <<EOF
- name: ${name}
  version: ~${COMMONCHARTVERSION}
  repository: "file://charts/${name}"
EOF
if [[ -n ${GITLAB_CI} ]];then
cat > ${APPNAME}/charts/$name/files/srcmeta.txt <<EOF
GITLAB_USER_LOGIN=${GITLAB_USER_LOGIN}
CI_PROJECT_URL=${CI_PROJECT_URL}
CI_PROJECT_PATH=${CI_PROJECT_PATH}
CI_PROJECT_NAMESPACE=${CI_PROJECT_NAMESPACE}
CI_PROJECT_NAME=${CI_PROJECT_NAME}
CI_BUILD_REF_SLUG=${CI_BUILD_REF_SLUG}
CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}
CI_PROJECT_ID=${CI_PROJECT_ID}
CI_COMMIT_SHA=${CI_COMMIT_SHA}
EOF
fi
done

cat > ${APPNAME}/${VAULE_FILENAME} <<EOF
global:
  rc-fullname: false
  ingress:
    internal:
      annotations-ingress-class: ${INGRESS_CLASS_INTERNAL}
      domain: ${DOMAIN_INTERNAL}
    public:
      annotations-ingress-class: ${INGRESS_CLASS_PUBLIC}
      domain: ${DOMAIN_PUBLIC}
  docker:
    repo: ${DOCKER_REPO}
    ns: ${DOCKER_NS}
  containers:
    securityContext:
      privileged: true
EOF


for i in ${SVCNAME};do \
    name=$i
    img=${IMG}
cat >> ${APPNAME}/${VAULE_FILENAME} <<EOF
${name}:
  ${name}:
    replicaCount: 1
    ingress:
      internal: 
        enabled: ${INGRESS_INTERNAL_ENABLED}
        host: {}
      public: 
        enabled: ${INGRESS_PUBLIC_ENABLED}
        host: {}
    image: ${IMG}
    deployment:
      podname_suffix: ${DEPLOYMENT_PODNAME_SUFFIX}
    service:
      type: ClusterIP
EOF
if [[ -z ${PORTS} ]];then
cat >> ${APPNAME}/${VAULE_FILENAME} <<EOF
      ports: []
EOF
else
cat >> ${APPNAME}/${VAULE_FILENAME} <<EOF
      ports:
EOF
echo -n ${PORTS} | perl -n  -e 'my $pl=$_;my @ports= split /\,/, $pl; foreach(@ports) { print " " x 8;print  " - $_\n"}'  >> ${APPNAME}/${VAULE_FILENAME}
fi

cat >> ${APPNAME}/${VAULE_FILENAME} <<EOF
    env.txt: |
EOF

done
/bin/cp -f ${APPNAME}/${VAULE_FILENAME}  ${APPNAME}/values.yaml


if [[ ${K8S_AUTOCD} -gt 0 ]];then
echo "#auto deploy"
  set +e
  kubectl get -n ${K8S_NS} deployment $i
  rv=$?
  set -e
  set -x
set -v
  if [[ ${rv} -eq 0 ]];then
    kubectl set image -n ${K8S_NS} deployment ${SVCNAME}  ${SVCNAME}=${IMG}
  else
    set +e
    kubectl version
    helm version
    set -e
    # detect helm version on k8s
    kubectl get pod --all-namespaces |egrep tiller
    rv=$?
    if [[ ${rv} -eq 0 ]];then
       # helm 2.x
       helm2 upgrade --force --install  --namespace ${K8S_NS} ${K8S_NS}-${SVCNAME} ${APPNAME}
    else
       # helm 3.x
       helm3 upgrade --force --install  --namespace ${K8S_NS} ${K8S_NS}-${SVCNAME} ${APPNAME}
    fi
  fi
#  kubectl set resources deployment -n ${K8S_NS} deployment ${i} --limits=cpu=200m,memory=1024Mi 
  set +x
  if [[ ${CICD_NS_RABC_ENABLED} -gt 0 ]];then
    kubectl set -n  ${K8S_NS}  serviceaccount deployment ${SVCNAME}  ${SVCNAME}
  fi
fi
set +v
rm -rf ${K8S_NS}-${SVCNAME}
set +e
if [[ -f ${SCRIPT_DIR}/rancher-auto ]];then
  source  ${SCRIPT_DIR}/rancher-auto
fi
set -e