#!/bin/bash
#author huangjimin
#jimin.huang@nx-engine.com
#get info from k8s namespace, then generate helm template for all services in the NS
USAGE="usage: $0 K8S_NS [O_DIR]"

###################################################################
THIS_SCRIPT=$(cd $(dirname "${BASH_SOURCE:-$0}"); pwd)/$(basename "${BASH_SOURCE:-$0}")
#automatic detection TOPDIR
SCRIPT_DIR_A=$(dirname  "${THIS_SCRIPT}")
SCRIPT_DIR=$(realpath "${SCRIPT_DIR_A}")
#automatic detection TOPDIR

TEMPLATE_DIR="$(xdir=${SCRIPT_DIR};cd ${SCRIPT_DIR}; while /usr/bin/test ! -e .TOP ; do \
        xdir=`cd ../;pwd`;                        \
        if [ "$xdir" = "/" ] ; then               \
           echo  1>&2;                            \
           break;                                 \
        fi ;                                      \
        cd "$xdir";                               \
        done ;                                    \
        pwd;)"

if [[ -z "${TEMPLATE_DIR}" ]];then
TEMPLATE_DIR="${SCRIPT_DIR}"
fi
echo "THIS_SCRIPT  = $THIS_SCRIPT"
echo "SCRIPT_DIR   = SCRIPT_DIR"
echo "TEMPLATE_DIR = ${TEMPLATE_DIR}"

if [[ -n "${TEAMCITY_GIT_PATH}" ]];then
    echo "Run on Teamcity"
    BUILD_COUNTER="-t${BUILD_NUMBER}"
elif [[ -n ${JENKINS_URL} ]];then
    echo "Run on Jenkins CI"
    BUILD_COUNTER="-j${BUILD_NUMBER}"
    GITLAB_CI
elif [[ -n "${GITLAB_CI}" ]];then
    echo "Run on Gitlab CI"
    BUILD_COUNTER="-g${BUILD_NUMBER}"
else
    echo "Run manual"
    BUILD_COUNTER="-m"
fi


####################################################################

if [ $# -lt 1 ];then
  echo "${USAGE}"
  exit 1;
fi
SRC_NS="$1"
CURDATE=$(date +%Y%m%d%H%M%S)
VERSION=${CURDATE}${BUILD_COUNTER}
RCNAME="$(pwd)/${SRC_NS}"
RCNAME="$(pwd)/${SRC_NS}"
if [ $# -gt 1 ];then         
  RCNAME=$2
fi

echo "NS         =${SRC_NS}"
echo "KUBECONFIG =${KUBECONFIG}"
echo "RCNAME     =${RCNAME}"
kubectl cluster-info
kubectl get ns ${SRC_NS}
if [ $? -ne 0 ];then
  echo "Error k8s NS ${SRC_NS} no exist"
  exit 2;
fi

mkdir -p "${RCNAME}"
rm -rf "${RCNAME}/images.yaml"
rm -rf "${RCNAME}/images.txt"
cat > "${RCNAME}/images.yaml" <<EOF
global:
  src:
    k8s:
      kubeconfig: ${HOME}/.kube/config
      ns: ${SRC_NS}
    docker:
      repo: docker.io
      ns: default
  dst:
    docker:
      repo: docker.io
      ns: default
    k8s:
      rc-fullname: false
      ns: ${SRC_NS}
      kubeconfig: ${HOME}/.kube/config
      ingress:
        internal:
          annotations-ingress-class: nginx
          domain: ${SRC_NS}-internal.tofill
        public:
          annotations-ingress-class: nginx
          domain: ${SRC_NS}-public.tofill
      containers:
        securityContext:
          privileged: true
EOF


MWARE="redis|kafka|solr|elasticsearch|hbase|mongo|mysql|strimzi-cluster-operator|es|pvc|zookeeper"
echo "##########################gen img/ env/ port"
kubectl get -n ${SRC_NS} deployment  --no-headers |  awk '{print $1}' | egrep -v "${MWARE}" |sort | \
while read i; do 
    name=$i
    echo "export app for ${SRC_NS}/${name}"
    mkdir -p "${RCNAME}/${name}"
    img=`kubectl get -n ${SRC_NS} deployment $i  -o=jsonpath='{.spec.template.spec.containers[0].image}'`
    echo ${img} > "${RCNAME}/${name}/img.txt"
    kubectl get -n ${SRC_NS} cm $name -o=jsonpath='{.data.env\.txt}' > "${RCNAME}/${name}/env.txt"
    kubectl get -n ${SRC_NS} cm $name -o=jsonpath='{.data.default-entrypoint\.sh}' 2>/dev/null > "${RCNAME}/${name}/default-entrypoint.sh"
    if [[ $(wc -l "${RCNAME}/${name}/default-entrypoint.sh"  | awk '{print $1}') -lt 1 ]];then
      rm -f  "${RCNAME}/${name}/default-entrypoint.sh"
    fi
    kubectl get -n ${SRC_NS} cm $name -o=jsonpath='{.data.override-entrypoint\.sh}' > "${RCNAME}/${name}/override-entrypoint.sh" 2>/dev/null
    if [[ $(wc -l "${RCNAME}/${name}/override-entrypoint.sh"  | awk '{print $1}') -lt 1 ]];then
      rm -f  "${RCNAME}/${name}/override-entrypoint.sh"
    fi
    kubectl get -n ${SRC_NS} --export cm ${name}-initdata -o=yaml >"${RCNAME}/${name}/${name}-initdata.yaml" 2>/dev/null
    if [[ $(wc -l "${RCNAME}/${name}/${name}-initdata.yaml"  | awk '{print $1}') -lt 1 ]];then
      rm -f  "${RCNAME}/${name}/${name}-initdata.yaml"
    fi

    kubectl get -n  ${SRC_NS} svc $i  -o=jsonpath='{.spec.ports[0].port}'  &> /dev/null
    if [[ $? -eq 0 ]];then
        kubectl get -n  ${SRC_NS} svc $i  -o=jsonpath='{.spec.ports[0].port}'  > "${RCNAME}/${name}/ports.txt"
        kubectl get -n  ${SRC_NS} svc $i  -o=jsonpath='{.spec.ports[1].port}'  &> /dev/null
        if [[ $? -eq 0 ]];then
            echo -n ',' >> "${RCNAME}/${name}/ports.txt"
            kubectl get -n  ${SRC_NS} svc $i  -o=jsonpath='{.spec.ports[1].port}'  >> "${RCNAME}/${name}/ports.txt"
            kubectl get -n  ${SRC_NS} svc $i  -o=jsonpath='{.spec.ports[2].port}'  &> /dev/null
            if [[ $? -eq 0 ]];then
                echo -n ',' >> "${RCNAME}/${name}/ports.txt"
                kubectl get -n  ${SRC_NS} svc $i  -o=jsonpath='{.spec.ports[2].port}'  >> "${RCNAME}/${name}/ports.txt"
            fi
        fi
    fi
cat >> "${RCNAME}/images.yaml" <<EOF
${name}:
  ${name}:
    replicaCount: 1
    ingress:
      internal:
        enabled: true
        host: {}
      public:
        enabled: true
        host: {}
    image: ${img}
    service:
      type: ClusterIP
EOF

PORTS=$(head -n 1 "${RCNAME}/${name}/ports.txt")
if [[ -z ${PORTS} ]];then
cat >> "${RCNAME}/images.yaml" <<EOF
      ports: []
EOF
else
cat >> "${RCNAME}/images.yaml" <<EOF
      ports:
EOF
echo ${PORTS} | perl -n  -e 'my $pl=$_;chomp($pl);my @ports= split /\,/, $pl; foreach(@ports) { print " " x 8;print  " - $_\n"}'  >> ${RCNAME}/images.yaml 
fi

echo ${img} >> "${RCNAME}/images.txt"
done


