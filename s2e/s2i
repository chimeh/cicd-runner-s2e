#!/bin/bash
#cicd toolset
#author: jimin.huang
#email: jimin.huang@benload.com
#email: jimminh@163.com
set -e
set +x

###################################################################
THIS_SCRIPT=$(realpath $(cd "$(dirname "${BASH_SOURCE:-$0}")"; pwd)/$(basename ${BASH_SOURCE:-$0}))
#automatic detection TOPDIR
SCRIPT_DIR=$(dirname $(realpath ${THIS_SCRIPT}))

USAGE="
  usage:
  A cicd tool, from src to artifact, to docker img, deploy into kubernetes:
  I. default do all action(artifact,docker,deploy):
  $(basename $(realpath $0)) /path/to/srctop

  II. only do specify action:
  $(basename $(realpath $0)) /path/to/srctop [ analysis|artifact|docker|deploy|deploy-update-blue ]

    1. only do artifact
    $(basename $(realpath $0)) /path/to/srctop artifact

    2. only do docker build push
    export DOCKER_REPO=harbor.benload.com
    export DOCKER_NS=bu5
    $(basename $(realpath $0)) /path/to/srctop docker

    3. only do kubernetes deploy
    export K8S_KUBECONFIG=/root/.kube/config
    export K8S_NS_SUFFIX=-dev
    export K8S_NS=default
    export K8S_DOMAIN_INTERNAL=benload.cn
    export K8S_DOMAIN_PUBLIC=bu5-dev.tx
    export INGRESS_INTERNAL_ENABLED=1
    export INGRESS_PUBLIC_ENABLED=1
    export INGRESS_CLASS_INTERNAL=nginx
    export INGRESS_CLASS_PUBLIC=nginx
    $(basename $(realpath $0)) /path/to/srctop deploy

  III. do exec cmd:
  $(basename $(realpath $0)) /path/to/rundir exec wrappercmd [...]
    1. do ls on /root directory
    $(basename $(realpath $0)) /root ls
"

if [[ $# -lt 1 ]];then
    echo "${USAGE}"
    exit 1
else
    SRC_TOP=$(realpath $1)
fi

if [[ $# -gt 1 ]];then
    ACTION_STAGE=$2
else
    ACTION_STAGE="ACTION_ALL"
fi
if [[ -z ${CI_PROJECT_PATH} ]];then
  CI_PROJECT_PATH="$(git rev-parse --show-toplevel)"
fi
if [[ -z ${CI_PROJECT_PATH} ]];then
CUR_DIR=$(pwd)
CI_PROJECT_PATH=$(xdir=${CUR_DIR};cd ${CUR_DIR}; while /usr/bin/test ! -d .git ; do \
        xdir=`cd ../;pwd`;                       \
        if [ "$xdir" = "/" ] ; then             \
           echo  1>&2;                          \
           cd ${CUR_DIR}                        \
           break;                               \
        fi ;                                    \
        cd $xdir;                               \
        pwd;                                    \
        done)
fi
DEFAULT_NS="${S2E_ORG}${S2E_NS}"
if [[ "" == ${DEFAULT_NS} ]];then
    DEFAULT_NS="$(echo ${CI_PROJECT_PATH} | perl -ne 's@^\/@@;print' | awk -F"/" '{print $1$2}')"
fi
if [[ "" == ${DEFAULT_NS} ]];then
    DEFAULT_NS="default"
fi
echo "SRC_TOP=${SRC_TOP}"
echo "CI_PROJECT_PATH=${CI_PROJECT_PATH}"
echo "DEFAULT_NS=${DEFAULT_NS}"
S2I_REPORT_DIR=$(git rev-parse --show-toplevel)/.s2i
mkdir -p ${S2I_REPORT_DIR}
RUNNER_HOME=$(eval echo ~$USER)

cd ${SRC_TOP}
function do_src_get_srctype_by_topdir()
{
    echo "$FUNCNAME"
    # try to guest java or nodejs, ...
    echo "try to detect java/nodejs source"
    DETECT_JAVA="find ${SRC_TOP} -maxdepth 1 -iname pom.xml"
    DETECT_NODEJS="find ${SRC_TOP} -maxdepth 1 -iname package.json"
    DETECT_DEFAULT_TOP="find ${SRC_TOP}   -maxdepth 1 -iname .TOP"
    DETECT_DEFAULT_GIT="find ${SRC_TOP}   -maxdepth 1 -iname .git"
    eval ${DETECT_JAVA}
    eval ${DETECT_NODEJS}
    if [[ -n $(eval ${DETECT_JAVA}) ]];then
        pom=`echo $(eval ${DETECT_JAVA}) | head -n 1`
        SRC_TYPE=java
        echo "SRC_TYPE=${SRC_TYPE}"
    elif [[ -n $(eval ${DETECT_NODEJS}) ]];then
        SRC_TYPE=nodejs
        echo "SRC_TYPE=${SRC_TYPE}"
    elif [[ -n $(eval ${DETECT_DEFAULT_GIT}) ]];then
        SRC_TYPE=none
        echo "SRC_TYPE=${SRC_TYPE}"
    else
        SRC_TYPE=none
        echo "SRC_TYPE=${SRC_TYPE}"
        SRC_VERSION="v1"
        echo "Warn can't detect SRC_VERSION !!!!"
    fi
    echo "检测为 SRC_TYPE=${SRC_TYPE}"
    echo CI_PROJECT_REPOSITORY_LANGUAGES=${CI_PROJECT_REPOSITORY_LANGUAGES}
    if [[ -n $(eval ${DETECT_DEFAULT_GIT}) ]];then
        PWD_HAVE_DOT_GIT=1
    else 
        PWD_HAVE_DOT_GIT=0
    fi
    ###################################################################  
}

function do_src_get_reponame()
{
    echo "$FUNCNAME"
    if [[ -z ${SRC_TOP} ]];then
        echo "can't detect SRC_TOP"
        exit 1
    fi
    if [[ -n ${TEAMCITY_GIT_PATH} ]];then
        echo "Teamcity CICD"
        SRC_BRANCHER_NAME=${BRANCH_NAME:-$(git branch |egrep '\*' |  perl -n -e 'm/[*]\s+\W*(\w+)/g;print $1')}
        SRC_REPO_NAME=${TEAMCITY_BUILDCONF_NAME}
        BUILD_COUNTER="t${BUILD_NUMBER}"
    elif [[ -n ${JENKINS_URL} ]];then
        echo "Jenkins CICD"
        SRC_BRANCHER_NAME=${BRANCH_NAME:-$(git branch |egrep '\*' |  perl -n -e 'm/[*]\s+\W*(\w+)/g;print $1')}
        SRC_REPO_NAME=$(git config remote.origin.url | perl -n -e 'm/.+\/([-_\w]+).git/g;print $1')
        BUILD_COUNTER="j${BUILD_NUMBER}"
    elif [[ -n ${GITLAB_CI} ]];then
        echo "GITLAB CICD"
        SRC_BRANCHER_NAME=${CI_COMMIT_REF_SLUG}
        SRC_REPO_NAME="${CI_PROJECT_NAME}"
        BUILD_COUNTER="g${CI_PIPELINE_ID}"
    elif [[ -n ${GITHUB_ACTIONS} ]];then
        echo "GITHUB CICD"
        SRC_BRANCHER_NAME=$(git branch |egrep '\*' |  perl -n -e 'm/[*]\s+\W*(\w+)/g;print $1')
        SRC_REPO_NAME=$(basename $(realpath ${CI_PROJECT_PATH}))
        BUILD_COUNTER="$(date +%Y%m%d)"
    else
        echo "manual CICD"
        SRC_BRANCHER_NAME=$(git branch |egrep '\*' |  perl -n -e 'm/[*]\s+\W*(\w+)/g;print $1')
        SRC_REPO_NAME=$(basename $(realpath ${CI_PROJECT_PATH}))
        BUILD_COUNTER="c1"
    fi
    if [[ -f ${SRC_TOP}/VERSION ]]; then
        SRC_VERSION=$(head -n 1 ${SRC_TOP}/VERSION | perl -ne '$_ =~ /((0|[1-9][0-9]*).(0|[1-9][0-9]*).?(0|[1-9][0-9]*)*)/;print $1')
    else
        SRC_VERSION=$(date +%Y%m%d)
    fi
    if [[ -n ${CI_COMMIT_SHORT_SHA} ]];then
      SRC_GIT_COMMIT_ID=${CI_COMMIT_SHORT_SHA}
    else
      SRC_GIT_COMMIT_ID="$(cd ${SRC_TOP};git rev-parse --short HEAD )"
    fi
    
    echo "# SRC_TOP=${SRC_TOP}"
    echo "# SRC_BRANCHER_NAME=${SRC_BRANCHER_NAME}"
    echo "# SRC_VERSION=${SRC_VERSION}"
    echo "# SRC_REPO_NAME=${SRC_REPO_NAME}"
    echo "# SRC_GIT_COMMIT_ID=${SRC_GIT_COMMIT_ID}"
    echo "# BUILD_COUNTER=${BUILD_COUNTER}"
}

function do_src_analysis_nodejs()
{
    echo "$FUNCNAME"
    echo "TODO"
}

function do_src_analysis_java()
{
   echo "$FUNCNAME"
}
function do_src_analysis()
{
    echo "$FUNCNAME"
    echo "ENABLE_SONAR=${ENABLE_SONAR}"
    do_src_get_srctype_by_topdir
    
    case ${SRC_TYPE} in
        nodejs)
            echo "nodejs,"
            do_src_analysis_nodejs
            ;;
        java)
            echo "java,"
            do_src_analysis_java
            ;;
        python)
            echo "python, not support yet"
            ;;
        go)
            echo "go, not support yet"
            ;;
        c)
            echo "c/c++, not support yet"
            ;;
        *)
            echo "not support yet"
            ;;
    esac
}

function do_artifact_build_nodejs()
{
    echo "$FUNCNAME"
}
function do_artifact_build_java()
{
    echo "$FUNCNAME"
    if [[ ${ENABLE_SONAR} -ne 0 ]];then
        if [[ ${PWD_HAVE_DOT_GIT} -eq 1 ]];then
            SONAR_KEY="$(echo ${CI_PROJECT_PATH}| tr / .)"
        else
            SONAR_KEY="$(echo ${CI_PROJECT_PATH}-$(basename $PWD)| tr / .)"
        fi
        SONAR_OPT="sonar:sonar -Dsonar.projectKey=${SONAR_KEY} -Dsonar.projectName=${SONAR_KEY}"
    else
        SONAR_OPT=""
    fi
    if [[ ${ARTIFACT_DEPLOY} -gt 0 ]];then
        mvn clean package deploy ${SONAR_OPT} ${S2I_MVN_OPT}
        exit 0
    else
        set +e
        mvn clean package ${SONAR_OPT} ${S2I_MVN_OPT}
        rv=$?
        set -e
        if [[ ${rv} -ne 0 ]];then mvn package -U ${SONAR_OPT} ${S2I_MVN_OPT};fi
    fi
    set +e
    mvn dependency:tree -DoutputFile=java-dependency-tree.txt
    echo -e "\n\n\n"
    cat java-dependency-tree.txt
    egrep spring-boot-actuator java-dependency-tree.txt >/dev/null 2>&1
    rv=$?
    if [[ ${rv} -eq 0 ]];then
      export SPRING_BOOT_ACTUATOR=1
    else
      export SPRING_BOOT_ACTUATOR=0
      echo "Cant find actuator on dependency, Please enable spring-boot-actuator!"
    fi
    set -e
}
function do_artifact_build()
{
    echo "$FUNCNAME"
    echo "自动检测源码类型，并做artifact 构建"
    if [[ ${ARTIFACT_DEPLOY} -gt 0 ]];then
        ARTIFACT_DEPLOY=1
    else
        ARTIFACT_DEPLOY=0
    fi
    echo "NEXUS_REPO=${NEXUS_REPO}"
    echo "NEXUS_RELEASE=${NEXUS_RELEASE}"
    echo "ARTIFACT_DEPLOY=${ARTIFACT_DEPLOY}"

    do_src_get_srctype_by_topdir
    case ${SRC_TYPE} in
        nodejs)
            do_artifact_build_nodejs
            ;;
        java)
            do_artifact_build_java
            ;;
        python)
            echo "not support yet"
            ;;
        go)
            echo "not support yet"
            ;;
        *)
            echo "not support source, or detect fail, commit your build script to ${CI_PROJECT_PATH}/build.sh"
            ;;
    esac
}

function do_docker_get_imgurl_by_dockerfile()
{
    echo "$FUNCNAME"
    if [[ ! -f .dockerignore ]];then
      echo ".git" > .dockerignore
    fi
    DOCKER_THIS_DOCKERFILE=$(realpath $1)
    
    echo "DOCKER_THIS_DOCKERFILE=${DOCKER_THIS_DOCKERFILE}"
    if [[ -z ${DOCKER_THIS_DOCKERFILE} ]];then
        echo "can't detect Dockerfile"
        exit 1
    fi
    DOCKERFILE_DIR=$(realpath $(dirname ${DOCKER_THIS_DOCKERFILE}))


    if [[ "" == "${DOCKER_REPO}" ]];then
        DOCKER_REPO=${DOCKER_REPO:-harbor.benload.com}
    fi
    if [[ "" == "${DOCKER_NS}" ]];then
    DOCKER_NS=${DEFAULT_NS}
    fi
    if [[ "" == "${DOCKER_NS}" ]];then
    DOCKER_NS="default"
    fi
    do_src_get_reponame



    if [[ "${DOCKER_THIS_DOCKERFILE}" =~ "." ]];then
      # got bld if dockerfile name is /path/to/Dockerfile.bld
      DOCKER_TAG_SUFFIX=$(echo "${DOCKER_THIS_DOCKERFILE}" | tr '[A-Z]' '[a-z]' | perl -ni -e 's/dockerfile.?(.*)/\1/g;print')
      DOCKER_TAG_DIGIST=$(sha256sum ${DOCKER_THIS_DOCKERFILE} | cut -c -5)
      DOCKER_IMG_TAG=${SRC_BRANCHER_NAME}-${DOCKER_TAG_SUFFIX}-${DOCKER_TAG_DIGIST}
    else
      DOCKER_TAG_SUFFIX=""
      if [[ "${DOCKERFILE_DIR}" == "${SRC_TOP}" ]];then
          DOCKER_IMG_TAG=${SRC_BRANCHER_NAME}-${SRC_VERSION}-${SRC_GIT_COMMIT_ID}-${BUILD_COUNTER}${DOCKER_TAG_SUFFIX}
      else
          DOCKER_TAG_SUFFIX=$(basename ${DOCKERFILE_DIR})
          DOCKER_IMG_TAG=${SRC_BRANCHER_NAME}-${SRC_VERSION}-${SRC_GIT_COMMIT_ID}-${BUILD_COUNTER}${DOCKER_TAG_SUFFIX}
      fi
    fi

    DOCKER_URL_1=${DOCKER_REPO}/${DOCKER_NS}/${SRC_REPO_NAME}:${DOCKER_IMG_TAG}
    # all img push to test with diff tag, because should have testing, then retag after tested
    DOCKER_URL_2=${DOCKER_REPO}/${DOCKER_NS}/test:${SRC_REPO_NAME}-${DOCKER_IMG_TAG}
    DOCKER_URL_METHOD=${DOCKER_URL_METHOD:-${DOCKER_URL_METHOD:-1}} #default compatibility
    if [[ ${DOCKER_URL_METHOD} -eq 1 ]];then
      DOCKER_URL=${DOCKER_URL_1}
    elif [[ ${DOCKER_URL_METHOD} -eq 2 ]];then
      DOCKER_URL=${DOCKER_URL_2}
    fi
    DOCKER_SVC_PORTS=$(egrep EXPOSE -i ${DOCKER_THIS_DOCKERFILE}|egrep -v '#' |awk '{print $2}'| awk '{for(i=1;i<=NF;i++){printf "%s,", $i}}' |   perl -ne 's/(.+)\,$/\1/g;print' )
    
    if [[ -z ${DOCKER_SVC_PORTS} ]];then
        echo "NO EXPOSE in ${DOCKERFILE}"
        DOCKER_SVC_PORTS=""
    fi
    DOCKER_URL_LATEST=$(echo ${DOCKER_URL} |perl -ni -e '{s|(.+):.+|\1:latest|;print}')
    DOCKER_URL_LATEST_BRANCH=$(echo ${DOCKER_URL} |perl -ni -e "{s|(.+):.+|\1:latest-${SRC_BRANCHER_NAME}|;print}")

    echo "# DOCKER_SVC_PORTS=${DOCKER_SVC_PORTS}"
    echo "# DOCKER_THIS_DOCKERFILE=${DOCKER_THIS_DOCKERFILE}"
    echo "# DOCKERFILE_DIR=${DOCKERFILE_DIR}"
    echo "# DOCKER_REPO=${DOCKER_REPO}"
    echo "# DOCKER_NS=${DOCKER_NS}"
    echo "# DOCKER_TAG_SUFFIX=${DOCKER_TAG_SUFFIX}"
    echo "# DOCKER_IMG_TAG=${DOCKER_IMG_TAG}"

    echo "# DOCKER_URL_1=${DOCKER_URL_1}"
    echo "# DOCKER_URL_2=${DOCKER_URL_2}"
    echo "# DOCKER_URL_METHOD=${DOCKER_URL_METHOD}"
    echo "# DOCKER_URL=${DOCKER_URL}"
    echo "# DOCKER_URL_LATEST=${DOCKER_URL_LATEST}"
    echo "##########################################"
}

function do_docker_build_by_dockerfile()
{
  if [[ $# -eq 0 ]];then
      echo "Error, do_docker_build_by_dockerfile /path/to/dockerfile "
      exit 1
  fi
  if [[ -z ${DOCKER_BUILD} ]];then
      DOCKER_BUILD=1
  fi
  if [[ ${DOCKER_BUILD:-0} -eq 0 ]];then
      echo "DOCKER_BUILD=${DOCKER_BUILD}, exit 0"
      exit 0
  fi
  local DOCKERFILE="${1}"
  do_docker_get_imgurl_by_dockerfile ${DOCKERFILE}

  DOCKER_IMG_EXIST_CHK=${DOCKER_IMG_EXIST_CHK:-0}
  if [[  ${DOCKER_IMG_EXIST_CHK} -ne 0 ]];then
    set +e
    echo "# check img existing for ${DOCKER_URL}, will not do docker build if existed"
    docker pull ${DOCKER_URL}
    rv=$?
    set -e
    if [[ ${rv} -eq 0 ]];then
      echo "# ${DOCKER_URL} check exist!, ignore docker build "
      echo "# export DOCKER_IMG_EXIST_CHK=0 to disable check "
      return
    fi
  fi

  docker build ${S2I_DOCKER_OPT} --pull -f ${DOCKERFILE} -t ${SRC_REPO_NAME}:x${BUILD_COUNTER} ${DOCKERFILE_DIR}

  docker tag ${SRC_REPO_NAME}:x${BUILD_COUNTER} ${DOCKER_URL}
  docker tag ${SRC_REPO_NAME}:x${BUILD_COUNTER} ${DOCKER_URL_LATEST}
  docker tag ${SRC_REPO_NAME}:x${BUILD_COUNTER} ${DOCKER_URL_LATEST_BRANCH}
  set +e
  docker push ${DOCKER_URL}
  rv=$?
  set -e
  # failed ,maybe not login, try login
  if [[ ${rv} -ne 0 ]];then
    echo "try docker login ${DOCKER_URL}"
    docker login -u "${DOCKER_USER}" -p  "${DOCKER_PASS}" ${DOCKER_REPO}/${DOCKER_NS}
    docker push ${DOCKER_URL}
  fi
  docker push ${DOCKER_URL_LATEST}
  set +e
  docker push ${DOCKER_URL_LATEST_BRANCH}
  docker rmi ${DOCKER_URL}
  docker rmi ${DOCKER_URL_LATEST}
  docker rmi ${DOCKER_URL_LATEST_BRANCH}
  set -e

  #report
  echo ${DOCKER_URL} > ${S2I_REPORT_DIR}/s2i.${CI_JOB_STAGE}.${SRC_REPO_NAME}.${DOCKER_SUBDIR_NAME}.${DOCKER_SVC_PORTS}.img.txt

  set +e
  docker rmi ${SRC_REPO_NAME}:x${BUILD_COUNTER}
  set -e
  echo -e "\n\n"
}
function do_deploy_k8s_by_dockerfile()
{
    echo "$FUNCNAME"
  if [[ $# -eq 0 ]];then
      echo "Error, usage: $FUNCNAME /path/to/dockerfile "
      exit 1
  fi
    local dockerfile=${1}

    do_docker_get_imgurl_by_dockerfile ${dockerfile}

    if [[ -z ${K8S_AUTOCD} ]];then
        K8S_AUTOCD=1
    fi
    if [[ -z ${K8S_NS} ]];then
        K8S_NS=${DEFAULT_NS}${K8S_NS_SUFFIX}
    fi
    if [[ -z ${K8S_NS} ]];then
        K8S_NS=default${K8S_NS_SUFFIX}
    fi
    if [[ -z ${K8S_DOMAIN_INTERNAL} ]];then
        K8S_DOMAIN_INTERNAL="bu5-idc.k8s.cd"
    fi
    if [[ -z ${K8S_DOMAIN_PUBLIC} ]];then
        K8S_DOMAIN_PUBLIC="bu5-idc.benload.com"
    fi

    if [[ -z ${K8S_SVCNAMES} ]];then
        K8S_SVCNAMES=${SRC_REPO_NAME}
    fi
    if [[ -n ${K8S_KUBECONFIG} ]];then
        echo "custom kubeconfig, get from K8S_KUBECONFIG"
        export KUBECONFIG=${K8S_KUBECONFIG}
    elif [[ -n ${KUBECONFIG} ]];then
        echo "custom kubeconfig, get from KUBECONFIG"
        export KUBECONFIG=${KUBECONFIG}
    else
        export KUBECONFIG="${HOME}/.kube/config"
        echo "default kubeconfig"
    fi

    if [[ ! -f ${KUBECONFIG} ]] && [[ -n ${K8S_KUBECONFIG_BASE64} ]];then
      mkdir -p $(dirname ${KUBECONFIG})
      echo ${K8S_KUBECONFIG_BASE64} |base64 --ignore-garbage --decode > ${KUBECONFIG} 2>/dev/null
    fi

    echo "K8S_AUTOCD=${K8S_AUTOCD}"
    echo "K8S_NS=${K8S_NS}"
    echo "K8S_SVCNAMES=${K8S_SVCNAMES}"
    echo "DEPLOY_SUFFIX=${DEPLOY_SUFFIX}"
    echo "K8S_KUBECONFIG=${K8S_KUBECONFIG}"
    echo "K8S_DOMAIN_INTERNAL=${K8S_DOMAIN_INTERNAL}"
    echo "K8S_DOMAIN_PUBLIC=${K8S_DOMAIN_PUBLIC}"
    echo "##########################################"

    kubectl get node
    kubectl cluster-info
    ### ensure ns exists
    set +e
    kubectl get ns ${K8S_NS}
    rv=$?
    set -e
    if [[ ${rv} -ne 0 ]];then
        echo kubectl create  namespace ${K8S_NS}
    fi
     

    if [ ${K8S_AUTOCD} -gt 0 ];then
        for SVCNAME in ${K8S_SVCNAMES};do
            set -x
            bash ${SCRIPT_DIR}/k8s-app-import ${DOCKER_URL} ${SVCNAME} ${K8S_NS} "${DOCKER_SVC_PORTS}" ${K8S_AUTOCD} ${K8S_DOMAIN_INTERNAL} ${K8S_DOMAIN_PUBLIC}
            set +x
            #report
            set +e
            kubectl get ingress -n ${K8S_NS} |egrep ${SVCNAME} 2>/dev/null
            rv=$?
            set -e
        done
    else
        echo "K8S_AUTOCD=${K8S_AUTOCD}, do nothing"
    fi
}
function do_docker_action()
{
    echo "$FUNCNAME"
    local action=all
    if [[ $# -gt 0 ]];then
       action=$1
    fi
    
    
    echo "Detect Dockerfile"
    #DETECT_DOCKERFILE="find ${SRC_TOP}   -maxdepth 1 -iname Dockerfile | sort"
    if [[ ${S2I_MUTI_DOCKERFILE} -gt 0 ]];then
      DETECT_DOCKERFILE="find ${SRC_TOP} -maxdepth 1 -type f  -regextype posix-egrep -iregex '.*Dockerfile.*'"
    else
      DETECT_DOCKERFILE="find ${SRC_TOP} -maxdepth 1 -type f  -regextype posix-egrep -iregex '.*Dockerfile'"
    fi
    eval ${DETECT_DOCKERFILE}
    eval ${DETECT_DOCKERFILE} | while read d;do
        if [[ -n $(eval ${DETECT_DOCKERFILE}) ]];then
            DOCKERFILE=$(realpath "${d}")
        else
            echo "can't detect Dockerfile"
            exit 0
        fi
        echo "########################################## ${ACTION_STAGE}"
        case ${action} in
            docker)
                do_docker_build_by_dockerfile ${DOCKERFILE}
                ;;
            deploy)
                do_deploy_k8s_by_dockerfile ${DOCKERFILE}
                ;;
            all)
                do_docker_build_by_dockerfile ${DOCKERFILE}
                do_deploy_k8s_by_dockerfile ${DOCKERFILE}
                ;;
            *)
                ;;
        esac
    done
}



function s2i_metric()
{
  set +e
  which metric-util-lib >/dev/null 2>&1
  rv=$?
  if [[ ${rv} -eq 0 ]];then
    set -o allexport; source metric-util-lib >/dev/null 2>&1;set +o allexport
  fi

  set -e
}

trap "s2i_metric" INT QUIT TERM EXIT

if [[ -z ${S2E_CALLED_TIME} ]];then
  S2E_CALLED_TIME=$(stat -c%X /proc/"$$")
fi
export S2E_CALLED_TIME
export SRC_TOP
# main logic
###################################################################


case ${ACTION_STAGE} in
    anal*)
        do_src_analysis
        ;;
    art*)
        do_artifact_build
        ;;
    docker)
        do_docker_action docker
        ;;
    deploy)
        export DEPLOYMENT_UPDATE_IMG=1
        export DEPLOYMENT_DEFAULT=1
        export DEPLOYMENT_BLUE=0
        do_docker_action deploy
        ;;
    deploy-update-default)
        export DEPLOYMENT_UPDATE_IMG=1
        export DEPLOYMENT_DEFAULT=1
        export DEPLOYMENT_BLUE=0
        do_docker_action deploy
        ;;
    deploy-update-blue)
        export DEPLOYMENT_UPDATE_IMG=1
        export DEPLOYMENT_DEFAULT=0
        export DEPLOYMENT_BLUE=1
        do_docker_action deploy
        ;;
    deploy-insert-default)
        export DEPLOYMENT_UPDATE_IMG=0
        export DEPLOYMENT_DEFAULT=1
        export DEPLOYMENT_BLUE=0
        do_docker_action deploy
        ;;
    ACTION_ALL*)
        echo "自动检测源码类型，并做artifact 构建，docker 构建, k8s 部署"
        do_artifact_build
        export DEPLOYMENT_UPDATE_IMG=1
        export DEPLOYMENT_DEFAULT=1
        export DEPLOYMENT_BLUE=0
        do_docker_action all
        # uat env 
        export K8S_NS=lxc-uat
        export KUBECONFIG=/root/.kube/uat.config
        export K8S_DOMAIN_INTERNAL=xd-scrm-uat.nxengine.com
        export DEPLOYMENT_UPDATE_IMG=0
        export DEPLOYMENT_DEFAULT=1
        export DEPLOYMENT_BLUE=0
        do_docker_action deploy
        ;;
    help*)
        echo "${USAGE}"
        ;;
    exec)
        shift 2
        set +e
        which $1 >/dev/null 2>&1
        rv=$?
        set -e
        if [[ $rv -ne 0 ]];then
          echo "Error, $1 cmd not exist in PATH"
          exit 1
        else
          echo "OK, try exec $@ , CMD = $@ $(which $1)"
          exec $@
        fi
        ;;
    *)
        echo "unkown action"
        ;;
esac

