#!/bin/bash
#cicd toolset
#author: jimin.huang
#email: jimin.huang@nx-engine.com
#email: jimminh@163.com
set -e

###################################################################
THIS_SCRIPT=$(realpath $(cd "$(dirname "${BASH_SOURCE:-$0}")"; pwd)/$(basename ${BASH_SOURCE:-$0}))
#automatic detection TOPDIR
SCRIPT_DIR=$(dirname $(realpath ${THIS_SCRIPT}))

USAGE="
  usage:
  s2i, a cicd tool, from src to artifact, to docker img, deploy into environment
  $(basename $(realpath $0)) /path/to/srctop [ analysis|artifact|docker|deploy ]
  
  $(basename $(realpath $0)) /path/to/srctop analysis
  $(basename $(realpath $0)) /path/to/srctop artifact
  $(basename $(realpath $0)) /path/to/srctop docker
  $(basename $(realpath $0)) /path/to/srctop deploy

"
echo "${USAGE}"
mkdir -p .s2i/
if [[ $# -lt 1 ]];then
    echo "${USAGE}"
    echo "use PWD as SRC_TOP"
    GAVE_SRC_TOP=${CI_PROJECT_DIR:-${PWD}}
else
    GAVE_SRC_TOP=$(realpath $1)
    SRC_TOP=$(realpath ${GAVE_SRC_TOP})
fi

if [[ $# -gt 1 ]];then
    ACTION_STAGE=$2
else
    ACTION_STAGE="ACTION_ALL"
fi
DEFAULT_NS="${S2E_ORG}${S2E_NS}"
if [[ -z ${DEFAULT_NS} ]];then
    DEFAULT_NS=$(echo ${CI_PROJECT_PATH} | awk -F"/" '{print $1$2}')
fi
if [[ -z ${DEFAULT_NS} ]];then
    DEFAULT_NS="default"
fi

function do_gen_s2e_meta()
{
cat >> PWD/s2i.meta.json <<EOF

EOF

}

function do_src_get_srctype_by_topdir()
{
    echo "$FUNCNAME"
    # try to guest java or nodejs, ...
    echo "try to detect java/nodejs source"
    DETECT_JAVA="find ${GAVE_SRC_TOP} -maxdepth 1 -iname pom.xml"
    DETECT_NODEJS="find ${GAVE_SRC_TOP} -maxdepth 2 -iname package.json"
    DETECT_DEFAULT_TOP="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname .TOP"
    DETECT_DEFAULT_GIT="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname .git"
    eval ${DETECT_JAVA}
    eval ${DETECT_NODEJS}
    if [[ -n $(eval ${DETECT_JAVA}) ]];then
        pom=`echo $(eval ${DETECT_JAVA}) | head -n 1`
#        SRC_TOP=`echo $(realpath $(dirname ${pom})) | sort | head -n 1`
        SRC_TYPE=java
        echo "SRC_TYPE=${SRC_TYPE}"
        #mvn --file ${SRC_TOP} -N  -Dexec.executable='echo'  -Dexec.args='${project.version}'  org.codehaus.mojo:exec-maven-plugin:1.3.1:exec 
        #SRC_VERSION=`mvn --file ${SRC_TOP} -q -N -Dexec.executable='echo'  -Dexec.args='${project.version}'  org.codehaus.mojo:exec-maven-plugin:1.3.1:exec | tail -n 1`
    elif [[ -n $(eval ${DETECT_NODEJS}) ]];then
#        package=`echo $(eval ${DETECT_NODEJS}) | head -n 1`
#        SRC_TOP=$(realpath $(dirname ${package}))
        SRC_TYPE=nodejs
        echo "SRC_TYPE=${SRC_TYPE}"
        #SRC_VERSION=$(cd ${SRC_TOP};npm run packageVersion |tail -n 1)
    elif [[ -n $(eval ${DETECT_DEFAULT_GIT}) ]];then
#        topfile=`echo $(eval ${DETECT_DEFAULT_GIT}) | head -n 1 | awk '{print $1}'`
#        SRC_TOP=`echo $(realpath $(dirname ${topfile})) | head -n 1`
        SRC_TYPE=none
        echo "SRC_TYPE=${SRC_TYPE}"
        #SRC_VERSION="$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
    else
        SRC_TYPE=none
        echo "SRC_TYPE=${SRC_TYPE}"
        SRC_VERSION="v1"
        echo "Warn can't detect SRC_VERSION !!!!"
    fi
    echo "SRC_TYPE=${SRC_TYPE}"
    echo CI_PROJECT_REPOSITORY_LANGUAGES=${CI_PROJECT_REPOSITORY_LANGUAGES}
    ###################################################################  
}
function do_src_get_srctype_by_subdir()
{
    echo "$FUNCNAME"
    THIS_SRCDIR=$(realpath $1)
    
    echo "THIS_SRCDIR=${THIS_SRCDIR}"
    if [[ -z ${THIS_SRCDIR} ]];then
        echo "please specify your THIS_SRCDIR"
        exit 1
    fi  
    echo "try to detect java or nodejs source"
    DETECT_JAVA="find ${THIS_SRCDIR} -maxdepth 1 -iname pom.xml"
    DETECT_NODEJS="find ${THIS_SRCDIR} -maxdepth 2 -iname package.json"
    DETECT_DEFAULT_TOP="find ${THIS_SRCDIR}   -maxdepth 2 -iname .TOP"
    DETECT_DEFAULT_GIT="find ${THIS_SRCDIR}   -maxdepth 2 -iname .git"
    eval ${DETECT_JAVA}
    eval ${DETECT_NODEJS}
    if [[ -n $(eval ${DETECT_JAVA}) ]];then
        pom=`echo $(eval ${DETECT_JAVA}) | head -n 1`
        SRC_TYPE=java
        echo "SRC_TYPE=${SRC_TYPE}"
        #mvn --file ${SRC_TOP} -N  -Dexec.executable='echo'  -Dexec.args='${project.version}'  org.codehaus.mojo:exec-maven-plugin:1.3.1:exec 
        #SRC_VERSION=`mvn --file ${SRC_TOP} -q -N -Dexec.executable='echo'  -Dexec.args='${project.version}'  org.codehaus.mojo:exec-maven-plugin:1.3.1:exec | tail -n 1`
    elif [[ -n $(eval ${DETECT_NODEJS}) ]];then
#        package=`echo $(eval ${DETECT_NODEJS}) | head -n 1`
#        SRC_TOP=$(realpath $(dirname ${package}))
        SRC_TYPE=nodejs
        echo "SRC_TYPE=${SRC_TYPE}"
        #SRC_VERSION=$(cd ${SRC_TOP};npm run packageVersion |tail -n 1)
    elif [[ -n $(eval ${DETECT_DEFAULT_GIT}) ]];then
#        topfile=`echo $(eval ${DETECT_DEFAULT_GIT}) | head -n 1 | awk '{print $1}'`
#        SRC_TOP=`echo $(realpath $(dirname ${topfile})) | head -n 1`
        SRC_TYPE=none
        echo "SRC_TYPE=${SRC_TYPE}"
        #SRC_VERSION="$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
    else
        SRC_TYPE=none
        echo "SRC_TYPE=${SRC_TYPE}"
#        SRC_VERSION="v1"
        echo "Warn can't detect SRC_VERSION !!!!"
    fi
    echo "SRC_TYPE=${SRC_TYPE} on subdir ${THIS_SRCDIR}" 
}


function do_src_get_reponame()
{
    echo "$FUNCNAME"
    if [[ -z ${SRC_TOP} ]];then
        echo "can't detect SRC_TOP"
        exit 1
    fi
    if [[ -n ${TEAMCITY_GIT_PATH} ]];then
        echo "Teamcity CICD"
        SRC_BRANCHER_NAME=$(git branch | grep \* | cut -d ' ' -f2)
        SRC_REPO_NAME=${TEAMCITY_BUILDCONF_NAME}
        BUILD_COUNTER="t${BUILD_NUMBER}"
    elif [[ -n ${JENKINS_URL} ]];then
        echo "Jenkins CICD"
        SRC_BRANCHER_NAME=$(git branch | grep \* | cut -d ' ' -f2)
        SRC_REPO_NAME="${JOB_NAME}"
        BUILD_COUNTER="j${BUILD_NUMBER}"
    elif [[ -n ${GITLAB_CI} ]];then
        echo "GITLAB CICD"
        SRC_BRANCHER_NAME=${CI_COMMIT_REF_SLUG}
        SRC_REPO_NAME="${CI_PROJECT_NAME}"
        BUILD_COUNTER="g${CI_PIPELINE_ID}"
    else
        echo "manual CICD"
        SRC_BRANCHER_NAME=$(git branch | grep \* | cut -d ' ' -f2)   
        SRC_REPO_NAME=$(basename $(realpath ${SRC_TOP}))
        BUILD_COUNTER="c1"
    fi
    if [[ -f ${SRC_TOP}/VERSION ]]; then
        SRC_VERSION=$(head -n 1 ${SRC_TOP}/VERSION | awk '{print $1}')
    else
        SRC_VERSION=1.0.0
    fi
    SRC_GIT_COMMIT_ID="$(cd ${SRC_TOP};git rev-parse --short HEAD )"
    
    echo "SRC_TOP=${SRC_TOP}"
    echo "SRC_BRANCHER_NAME=${SRC_BRANCHER_NAME}"
    echo "SRC_VERSION=${SRC_VERSION}"
    echo "SRC_REPO_NAME=${SRC_REPO_NAME}"
    echo "SRC_GIT_COMMIT_ID=${SRC_GIT_COMMIT_ID}"
    echo "BUILD_COUNTER=${BUILD_COUNTER}"
}

function do_src_analysis_nodejs()
{
    echo "$FUNCNAME"
    echo "TODO"
}

function do_src_analysis_java()
{
   echo "$FUNCNAME"
   if [[ -z ${CI_PROJECT_PATH} ]];then
    CI_PROJECT_PATH=${SRC_TOP}
   fi
   mvn clean package sonar:sonar -Dsonar.projectKey=$(echo ${CI_PROJECT_PATH}| tr / .) -Dsonar.projectName=$(echo ${CI_PROJECT_PATH}| tr / .)
}
function do_src_analysis()
{
    echo "$FUNCNAME"
    echo "ENABLE_SONAR=${ENABLE_SONAR}"
    do_src_get_srctype_by_topdir
    
    case ${SRC_TYPE} in
        nodejs)
            echo "nodejs,"
            do_src_analysis_nodejs
            ;;
        java)
            echo "java,"
            do_src_analysis_java
            ;;
        python)
            echo "python, not support yet"
            ;;
        go)
            echo "go, not support yet"
            ;;
        c)
            echo "c/c++, not support yet"
            ;;
        *)
            echo "not support yet"
            ;;
    esac
}

function do_artifact_build_nodejs()
{
    echo "$FUNCNAME"
    pushd ${SRC_TOP}
    popd
}
function do_artifact_build_java()
{
    echo "$FUNCNAME"
    pushd ${SRC_TOP}
    
    if [[ ${ARTIFACT_DEPLOY} -gt 0 ]];then
        mvn clean deploy
        exit 0
    else
        mvn clean package
    fi
    popd
}
function do_artifact_build()
{
    echo "$FUNCNAME"
    if [[ ${ARTIFACT_DEPLOY} -gt 0 ]];then
        ARTIFACT_DEPLOY=1
    else
        ARTIFACT_DEPLOY=0
    fi
    echo "NEXUS_REPO=${NEXUS_REPO}"
    echo "NEXUS_RELEASE=${NEXUS_RELEASE}"
    echo "ARTIFACT_DEPLOY=${ARTIFACT_DEPLOY}"
    do_src_get_srctype_by_topdir
    case ${SRC_TYPE} in
        nodejs)
            do_artifact_build_nodejs
            ;;
        java)
            do_artifact_build_java
            ;;
        python)
            echo "not support yet"
            ;;
        go)
            echo "not support yet"
            ;;
        *)
            echo "not support source, or detect fail"
            ;;
    esac
}

function do_docker_get_imgurl_by_dockerfile()
{
    echo "$FUNCNAME"
    DOCKER_THIS_DOCKERFILE=$(realpath $1)
    if [[ $# -gt 1 ]];then
        MY_SLOT=$2
     else
        MY_SLOT=0
    fi
    
    echo "DOCKER_THIS_DOCKERFILE=${DOCKER_THIS_DOCKERFILE}"
    if [[ -z ${DOCKER_THIS_DOCKERFILE} ]];then
        echo "can't detect Dockerfile"
        exit 1
    fi
    DOCKFILE_DIR=$(dirname ${DOCKER_THIS_DOCKERFILE})

    DOCKER_THIS_NS=$(perl -e "@DOCKERNS = split(/\s+/, \$ENV{DOCKER_NS});\$NS=\$DOCKERNS[$MY_SLOT];\$NS =~ s/[\p{Pi}\p{Pf}'\"]//g;print STDOUT \$NS")
    K8S_THIS_NS=$(perl -e "@K8SNS = split(/\s+/, \$ENV{K8S_NS});print STDOUT \$K8SNS[$MY_SLOT];")

    if [[ -z ${DOCKER_REPO} ]];then
        DOCKER_REPO=${DOCKER_REPO:-harbor.nx-engine.com}
    fi
    if [[ -z ${DOCKER_NS} ]];then
    DOCKER_NS=${DEFAULT_NS}
    fi
    if [[ -z ${DOCKER_NS} ]];then
    DOCKER_NS="default"
    fi
    do_src_get_reponame
    
    if [[ "${DOCKFILE_DIR}" -eq "${SRC_DIR}" ]];then
        DOCKER_IMG_TAG=${SRC_BRANCHER_NAME}-${SRC_GIT_COMMIT_ID}-e-${SRC_VERSION}-${BUILD_COUNTER}
    else
        DOCKER_SUBDIR_NAME=$(basename $(realpath  ${DOCKFILE_DIR}))
        DOCKER_IMG_TAG=${SRC_BRANCHER_NAME}-${SRC_GIT_COMMIT_ID}-${SRC_VERSION}-${BUILD_COUNTER}-${DOCKER_SUBDIR_NAME}
    fi
    DOCKER_URL=${DOCKER_REPO}/${DOCKER_THIS_NS}/${SRC_REPO_NAME}:${DOCKER_IMG_TAG}
    DOCKER_SVC_PORTS=$(egrep EXPOSE -i ${DOCKER_THIS_DOCKERFILE}|egrep -v '#' |awk '{print $2}'| awk '{for(i=1;i<=NF;i++){printf "%s,", $i}}' |   perl -ne 's/(.+)\,$/\1/g;print' )
    
    if [[ -z ${DOCKER_SVC_PORTS} ]];then
        echo "NO EXPOSE in ${DOCKFILE}"
        DOCKER_SVC_PORTS=""
    fi
    echo "DOCKER_SVC_PORTS=${DOCKER_SVC_PORTS}"
    echo "DOCKER_THIS_DOCKERFILE=${DOCKER_THIS_DOCKERFILE}"
    echo "DOCKFILE_DIR=${DOCKFILE_DIR}"
    echo "DOCKER_REPO=${DOCKER_REPO}"
    echo "DOCKER_NS=${DOCKER_NS}"
    echo "DOCKER_THIS_NS=${DOCKER_THIS_NS}"
    echo "DOCKER_SUBDIR_NAME=${DOCKER_SUBDIR_NAME}"
    echo "DOCKER_IMG_TAG=${DOCKER_IMG_TAG}"
    echo "DOCKER_URL=${DOCKER_URL}"
    echo "K8S_THIS_NS=${K8S_THIS_NS}"
}



function do_docker_build()
{
    echo "$FUNCNAME"
    if [[ -z ${DOCKER_BUILD} ]];then
        DOCKER_BUILD=1
    fi
    if [[ ${DOCKER_BUILD} -eq 0 ]];then
        echo "DOCKER_BUILD=${DOCKER_BUILD}, exit 0"
        exit 0
    else
        echo "start docker build"
    fi
    
    echo "detect Dockerfile"
    DETECT_DOCKERFILE="find ${SRC_TOP}   -maxdepth 2 -iname Dockerfile | sort"
    eval ${DETECT_DOCKERFILE}
    eval ${DETECT_DOCKERFILE} | while read d;do
        if [[ -n $(eval ${DETECT_DOCKERFILE}) ]];then
            #DOCKFILE=$(realpath `echo $(eval ${DETECT_DOCKERFILE})| head -n 1`)
            DOCKFILE=$(realpath `echo ${d} | head -n 1`)
            DOCKFILE_DIR=$(dirname ${DOCKFILE})
        else
            echo "can't detect Dockerfile"
            exit 0
        fi

        
        DOCKER_SVC_PORTS=$(egrep EXPOSE -i ${DOCKFILE}|egrep -v '#' |awk '{print $2}'| awk '{for(i=1;i<=NF;i++){printf "%s,", $i}}' |   perl -ne 's/(.+)\,$/\1/g;print' )
        
        if [[ -z ${DOCKER_SVC_PORTS} ]];then
            echo "warn, no EXPOSE in ${DOCKFILE}"
            DOCKER_SVC_PORTS=80
        fi
        
        do_docker_get_imgurl_by_dockerfile ${d} 0
        echo "########################################## ${ACTION_STAGE}"
        echo "build docker image"
        echo "DOCKFILE=${DOCKFILE}"
        echo "DOCKFILE_DIR=${DOCKFILE_DIR}"
        echo "DOCKER_BUILD=${DOCKER_BUILD}"
        echo "DOCKER_REPO=${DOCKER_REPO}"
        echo "DOCKER_NS=${DOCKER_NS}"
        echo "DOCKER_SUBDIR_NAME=${DOCKER_SUBDIR_NAME}"
        echo "DOCKER_IMG_TAG=${DOCKER_IMG_TAG}"
        echo "DOCKER_URL=${DOCKER_URL}"
        echo "DOCKER_SVC_PORTS=${DOCKER_SVC_PORTS}"
        echo "##########################################"
        docker build --pull -f ${DOCKFILE} -t ${SRC_REPO_NAME}:x${BUILD_COUNTER} ${DOCKFILE_DIR}
        docker tag ${SRC_REPO_NAME}:x${BUILD_COUNTER} ${DOCKER_URL}

        slot=0
        echo ${DOCKER_NS}
        echo ${DOCKER_NS} | perl -ne '@ns=split /\s+/, $_;foreach(@ns){print "$_\n"} '  |
        while read ns;do
            if [[ ${slot} -gt 0 ]];then
                do_docker_get_imgurl_by_dockerfile ${d} ${slot}
            fi
            echo "DOCKER_URL=${DOCKER_URL}"
            docker tag ${SRC_REPO_NAME}:x${BUILD_COUNTER} ${DOCKER_REPO}/${DOCKER_THIS_NS}/${SRC_REPO_NAME}:latest
            docker tag ${SRC_REPO_NAME}:x${BUILD_COUNTER} ${DOCKER_URL}
            docker push ${DOCKER_URL}
            docker push ${DOCKER_REPO}/${DOCKER_THIS_NS}/${SRC_REPO_NAME}:latest
            docker rmi ${DOCKER_URL}
            docker rmi ${DOCKER_REPO}/${DOCKER_THIS_NS}/${SRC_REPO_NAME}:latest
            slot=$((${slot} + 1))
            echo ${DOCKER_URL} >> .s2i/s2i.${SRC_REPO_NAME}.${CI_COMMIT_SHA}.${DOCKER_SVC_PORTS}.img.txt
        done
        

       docker rmi ${SRC_REPO_NAME}:x${BUILD_COUNTER}
        echo -e "\n\n"
    done
}

function do_deploy_k8s()
{
    echo "$FUNCNAME"
    TRYTOP=$(xdir=${SCRIPT_DIR};cd ${SCRIPT_DIR}; while /usr/bin/test ! -e .TOP ; do \
            xdir=`cd ../;pwd`;                       \
            if [ "$xdir" = "/" ] ; then              \
               echo  1>&2; \
               break;                               \
            fi ;                                    \
            cd $xdir;                               \
            done ;                                  \
            pwd;)
    WORKDIR=$(pwd)
    if [[ -z ${TRYTOP} ]];then
        TRYTOP=${WORKDIR}
    fi
    if [[ -z ${K8S_AUTOCD} ]];then
        K8S_AUTOCD=0
    fi
    K8S_NS=${DEFAULT_NS}
    if [[ -z ${K8S_NS} ]];then
        K8S_NS=default${K8S_NS_SUFFIX}
    fi
    if [[ -z ${K8S_DOMAIN_INTERNAL} ]];then
        K8S_DOMAIN_INTERNAL="bu5-idc.k8s.cd"
    fi
    if [[ -z ${K8S_DOMAIN_PUBLIC} ]];then
        K8S_DOMAIN_PUBLIC="bu5-idc.nxengine.com"
    fi
    

    
    if [[ -z ${K8S_SVCNAMES} ]];then
        K8S_SVCNAMES=${SRC_REPO_NAME}
    fi
    if [[ -n ${K8S_KUBECONFIG} ]];then
        echo "custom kubeconfig"
        export KUBECONFIG=${K8S_KUBECONFIG}
    else
        echo "default kubeconfig"
    fi
    echo "K8S_AUTOCD=${K8S_AUTOCD}"
    echo "K8S_NS=${K8S_NS}"
    echo "K8S_SVCNAMES=${K8S_SVCNAMES}"
    echo "K8S_KUBECONFIG=${K8S_KUBECONFIG}"
    echo "K8S_DOMAIN_INTERNAL=${K8S_DOMAIN_INTERNAL}"
    echo "K8S_DOMAIN_PUBLIC=${K8S_DOMAIN_PUBLIC}"
    echo "##########################################"
    kubectl get node
    kubectl  cluster-info
    ### ensure ns exists
    set +e
    kubectl --kubeconfig ${K8S_KUBECONFIG} get ns ${K8S_NS}
    rv=$?
    set -e
    if [[ ${rv} -ne 0 ]];then
        kubectl --kubeconfig ${K8S_KUBECONFIG} create  namespace ${K8S_NS}
    fi
    echo "detect Dockerfile"
    DETECT_DOCKERFILE="find ${SRC_TOP}   -maxdepth 2 -iname Dockerfile | sort"
    eval ${DETECT_DOCKERFILE}
    DOCKERFILE_COUNT=`eval ${DETECT_DOCKERFILE}|wc -l`
    if [[ ${DOCKERFILE_COUNT} -eq 0 ]];then
        echo "no Dockerfile detect"
        exit 0
    fi
    i=0
    eval ${DETECT_DOCKERFILE} | while read d;do
        i=$(( $i + 1 ))
        if [[ -n $(eval ${DETECT_DOCKERFILE}) ]];then
            #DOCKFILE=$(realpath `echo $(eval ${DETECT_DOCKERFILE})| head -n 1`)
            DOCKFILE=$(realpath `echo ${d} | head -n 1`)
            DOCKFILE_DIR=$(dirname ${DOCKFILE})
        else
            echo "can't detect Dockerfile"
            exit 0
        fi
        if [[ ${DOCKERFILE_COUNT} -gt 0 ]];then
            K8S_SVCNAMES=$(basename $(dirname ${DOCKFILE}))
        fi
        
        if [ ${K8S_AUTOCD} -gt 0 ];then
          slot=0
          for MY_K8S_NS in ${K8S_NS};do
            echo "$i##########################################${DOCKFILE}"
            do_docker_get_imgurl_by_dockerfile ${d} $slot
            for SVCNAME in ${K8S_SVCNAMES};do
                set +e
                kubectl get -n ${MY_K8S_NS}  deployments ${SVCNAME}
                RETVAL=$?
                set -e
                if [[ ${RETVAL} -eq 0 ]];then
                    kubectl set image -n ${MY_K8S_NS} deployments ${SVCNAME} ${SVCNAME}=${DOCKER_URL}
                else
                    bash ${SCRIPT_DIR}/k8s-app-import ${DOCKER_URL} ${SVCNAME} ${MY_K8S_NS} "${DOCKER_SVC_PORTS}" ${K8S_AUTOCD} ${K8S_DOMAIN_INTERNAL} ${K8S_DOMAIN_PUBLIC}
                fi
            done
            slot=$(( $slot + 1 ))
          done
        fi
    done
}



# main logic
echo "'$1'=$1 'ACTION_STAGE'=${ACTION_STAGE}"
###################################################################  


# check config valid, not valid will regenerate
set +e
gitlab current-user get
RV=$?
set -e

if [[ ${RV} -ne 0 ]];then
# gitlab cli config file not exist
cat > /root/.python-gitlab.cfg <<EOF
[global]
default = default
ssl_verify = true
timeout = 5

[default]
url = ${CI_SERVER_URL}
private_token = ${CI_PRIVATE_TOKEN}
api_version = 4
EOF
perl -ni -e "s#url.+#url = ${CI_SERVER_URL}#g;print" /root/.python-gitlab.cfg
perl -ni -e "s#private_token.+#private_token = ${CI_PRIVATE_TOKEN}#g;print" /root/.python-gitlab.cfg
fi


case ${ACTION_STAGE} in
    anal*)
        do_src_analysis
        ;;
    art*)
        do_artifact_build
        ;;
    docker*)
        do_docker_build
        ;;
    deploy*)
        do_deploy_k8s
        ;;
    ACTION_ALL*)
        do_artifact_build
        do_docker_build
        do_deploy_k8s
        ;;
esac

