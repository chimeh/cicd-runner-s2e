#!/bin/bash
#author: jimin.huang
#email: jimin.huang@nx-engine.com
set -e
USAGE="usage: $0 /path/to/srctop
       usage: $0 "
echo "${USAGE}"
###################################################################
THIS_SCRIPT=$(realpath $(cd "$(dirname "${BASH_SOURCE:-$0}")"; pwd)/$(basename ${BASH_SOURCE:-$0}))
#automatic detection TOPDIR
SCRIPT_DIR=$(dirname $(realpath ${THIS_SCRIPT}))
TRYTOP=$(xdir=${SCRIPT_DIR};cd ${SCRIPT_DIR}; while /usr/bin/test ! -e .TOP ; do \
        xdir=`cd ../;pwd`;                       \
        if [ "$xdir" = "/" ] ; then             \
           echo  1>&2; \
           break;                              \
        fi ;                                    \
        cd $xdir;                               \
        done ;                                  \
        pwd;)

bash ${SCRIPT_DIR}/s2i-depend
WORKDIR=$(pwd)
if [[ -z ${TRYTOP} ]];then
TRYTOP=${WORKDIR}
fi

if [[ $# -lt 1 ]];then
    cat <<EOF
    usage:
    a build runner for java|nodejs|... source
    
    $(realpath $0)   /path/to/srctop
    
EOF
    exit 1
fi
NE_BOOT_MATCH='ne-boot*'
echo "##########################################"
echo "NE_BOOT_MATCH=${NE_BOOT_MATCH}"
echo "TRYTOP=${TRYTOP}"
env |egrep -v LS_COLORS
echo "##########################################"
echo "start build"
GAVE_SRC_TOP=$(realpath $1)

# try to guest java or nodejs
echo "auto try to detect java or nodejs source and its topdir"
DETECT_JAVA="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname pom.xml"
DETECT_NODEJS="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname package.json"
DETECT_DEFAULT_TOP="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname .TOP"
DETECT_DEFAULT_GIT="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname .git"
eval ${DETECT_JAVA}
eval ${DETECT_NODEJS}
if [[ -n $(eval ${DETECT_JAVA}) ]];then
    pom=`echo $(eval ${DETECT_JAVA}) | head -n 1`
    echo "detect SRC_TOP from file ${pom}"
    SRC_TOP=`echo $(realpath $(dirname ${pom})) | sort | head -n 1`
    SRC_TYPE=java
    SRC_VERSION=`mvn --file ${SRC_TOP} -q -N -Dexec.executable='echo'  -Dexec.args='${project.version}'  org.codehaus.mojo:exec-maven-plugin:1.3.1:exec | tail -n 1`
elif [[ -n $(eval ${DETECT_NODEJS}) ]];then
    echo "detect SRC_TOP from file ${package}"
    package=`echo $(eval ${DETECT_NODEJS}) | head -n 1`
    SRC_TOP=$(realpath $(dirname ${package}))
    SRC_TYPE=nodejs
    SRC_VERSION=$(cd ${SRC_TOP};npm run packageVersion |tail -n 1)
elif [[ -n $(eval ${DETECT_DEFAULT_GIT}) ]];then
    echo "detect SRC_TOP from file .TOP"
    topfile=`echo $(eval ${DETECT_DEFAULT_GIT}) | head -n 1 | awk '{print $1}'`
    SRC_TOP=`echo $(realpath $(dirname ${topfile})) | head -n 1`
    SRC_TYPE=none
    SRC_VERSION="$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
elif [[ -n $(eval ${DETECT_DEFAULT_TOP}) ]];then
    echo "detect SRC_TOP from file .TOP"
    topfile=`echo $(eval ${DETECT_DEFAULT_TOP}) | head -n 1 | awk '{print $1}'`
    SRC_TOP=`echo $(realpath $(dirname ${topfile})) | head -n 1`
    SRC_TYPE=none
    SRC_VERSION="v"
else
    SRC_TYPE=none
    SRC_VERSION="cant-detect-version"
    echo "Error can't detect SRC_TOP !!!!"
    exit 1
fi
SRC_GIT_COMMIT_ID="-$(cd ${SRC_TOP};git rev-parse --short HEAD )"
if [[ -n ${TEAMCITY_GIT_PATH} ]];then
    echo "Teamcity CI"
    DOCKER_IMAGE_NAME=${TEAMCITY_BUILDCONF_NAME}
    BUILD_COUNTER="-t-${BUILD_NUMBER}"
elif [[ -n ${JENKINS_URL} ]];then
    echo "Jenkins CI"
    DOCKER_IMAGE_NAME="${JOB_NAME}"
    BUILD_COUNTER="-j-${BUILD_NUMBER}"
elif [[ -n ${GITLAB_CI} ]];then
    echo "GITLAB CI"
    DOCKER_IMAGE_NAME="${CI_PROJECT_NAME}"
    BUILD_COUNTER="-${CI_COMMIT_REF_SLUG}${SRC_GIT_COMMIT_ID}-g-${CI_BUILD_ID}"
else
    echo "can't detect name"
    DOCKER_IMAGE_NAME=$(basename $(realpath ${SRC_TOP}))
    BUILD_COUNTER="-custom-1"
fi

echo "##########################################"
echo "SRC_TOP=${SRC_TOP}"
echo "SRC_TYPE=${SRC_TYPE}"
echo "SRC_VERSION=${SRC_VERSION}"
echo "SRC_VERSION=${SRC_VERSION}"
echo "DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME}"
echo "BUILD_COUNTER=${BUILD_COUNTER}"
echo "SRC_GIT_COMMIT_ID=${SRC_GIT_COMMIT_ID}"
if [[ -z ${NEXUS_REPO} ]];then
    NEXUS_REPO=${NEXUS_REPO:-'http://nexus.nx-code.com/content/groups/ne-server-maven'}
fi
    export NEXUS_REPO
if [[ -z ${NEXUS_RELEASE} ]];then
    export NEXUS_RELEASE=${DOCKER_REPO:-'http://nexus.nx-code.com/content/repositories/ne-server-maven-release'}
fi
    export NEXUS_RELEASE
if [[ -z ${NEXUS_SNAPSHOT} ]];then
    export NEXUS_SNAPSHOT=${DOCKER_REPO:-'http://nexus.nx-code.com/content/repositories/ne-server-maven-snapshot'}
fi
    export NEXUS_SNAPSHOT
if [[ -z ${DOCKER_REPO} ]];then
    DOCKER_REPO=${DOCKER_REPO:-harbor-chengdu.nx-engine.com}
fi
if [[ -z ${DOCKER_NS} ]];then
    DOCKER_NS=default
fi
if [[ -z ${K8S_AUTOCD} ]];then
    K8S_AUTOCD=0
fi
if [[ -z ${K8S_NS} ]];then
    K8S_NS=sanbox
fi
if [[ -z ${K8S_SVCNAMES} ]];then
    K8S_SVCNAMES=${DOCKER_IMAGE_NAME}
fi
if [[ -z ${K8S_DOMAIN_INTERNAL} ]];then
    K8S_DOMAIN_INTERNAL=okd.cd
fi
if [[ -z ${K8S_DOMAIN_PUBLIC} ]];then
    K8S_DOMAIN_PUBLIC=nxengine.cn
fi
echo "##########################################"
echo "NEXUS_REPO=${NEXUS_REPO}"
echo "NEXUS_RELEASE=${NEXUS_RELEASE}"
echo "DOCKER_REPO=${DOCKER_REPO}"
echo "DOCKER_NS=${DOCKER_NS}"
echo "K8S_AUTOCD=${K8S_AUTOCD}"
echo "K8S_NS=${DOCKER_NS}"
echo "K8S_SVCNAMES=${K8S_SVCNAMES}"
echo "K8S_DOMAIN_INTERNAL=${K8S_DOMAIN_INTERNAL}"
echo "K8S_DOMAIN_PUBLIC=${K8S_DOMAIN_PUBLIC}"


echo "##########################################"
#ls -lh ${SRC_TOP}/*
echo "##########################################"

function do_nodejs_s2i()
{
        echo "soure2image begin, nodejs source, webpack, to docker image"
        pushd ${SRC_TOP}
        npm --registry=https://registry.npm.taobao.org \
            --cache=$HOME/.npm/.cache/cnpm \
            --disturl=https://npm.taobao.org/dist \
            --userconfig=$HOME/.cnpmrc install
         npm --registry=https://registry.npm.taobao.org \
            --cache=$HOME/.npm/.cache/cnpm \
            --disturl=https://npm.taobao.org/dist \
            --userconfig=$HOME/.cnpmrc run build
        popd
}
function do_java_s2i()
{
        echo "soure2image begin, java source, to jar, to docker image"
        pushd ${SRC_TOP}
        if [[ "${DOCKER_IMAGE_NAME}" =~ ${NE_BOOT_MATCH} ]];then
            mvn clean package deploy
            exit 0
        else
            mvn clean package sonar:sonar
        fi
}


case ${SRC_TYPE} in
    nodejs)
        do_nodejs_s2i
        ;;
    java)
        do_java_s2i
        ;;
    
    *)
        echo "node support source, or detect fail"
        ;;
    
esac
if [[ "${DOCKER_IMAGE_NAME}" =~ "ne-boot*" ]];then
    exit 0

fi

echo "detect Dockerfile"
DETECT_DOCKERFILE="find ${GAVE_SRC_TOP}   -maxdepth 2 -iname Dockerfile"
eval ${DETECT_DOCKERFILE}
if [[ -n $(eval ${DETECT_DOCKERFILE}) ]];then
    DOCKFILE=$(realpath `echo $(eval ${DETECT_DOCKERFILE})| head -n 1`)
    DOCKFILE_DIR=$(dirname ${DOCKFILE})
else
    echo "can't detect Dockerfile"
    exit -1
fi
echo "DOCKFILE=${DOCKFILE}"
echo "DOCKFILE_DIR=${DOCKFILE_DIR}"

SVC_PORTS=$(egrep EXPOSE -i ${DOCKFILE}|egrep -v '#' |awk '{print $2}'| awk '{for(i=1;i<=NF;i++){printf "%s,", $i}}' |   perl -ne 's/(.+)\,$/\1/g;print' )

if [[ -z ${SVC_PORTS} ]];then
    echo "warn, no EXPOSE in ${DOCKFILE}"
    SVC_PORTS=80
fi
echo "##########################################"
DOCKER_URL=${DOCKER_REPO}/${DOCKER_NS}/${DOCKER_IMAGE_NAME}:${SRC_VERSION}${BUILD_COUNTER}
echo "DOCKFILE=${DOCKFILE}"
echo "DOCKFILE_DIR=${DOCKFILE_DIR}"
echo "DOCKER_URL=${DOCKER_URL}"
echo "SVC_PORTS=${SVC_PORTS}"


echo "##########################################"
echo "build docker image"
echo "DOCKFILE=${DOCKFILE}"
echo "DOCKER_URL=${DOCKER_URL}"
echo "DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME}:x${BUILD_COUNTER}"
echo "DOCKER_URL=${DOCKER_URL}"
echo "##########################################"
docker build -f ${DOCKFILE} -t ${DOCKER_IMAGE_NAME}:x${BUILD_COUNTER} ${SRC_TOP}
docker tag ${DOCKER_IMAGE_NAME}:x${BUILD_COUNTER} ${DOCKER_URL}



docker push ${DOCKER_URL}
docker rmi ${DOCKER_IMAGE_NAME}:x${BUILD_COUNTER}
docker rmi ${DOCKER_URL}
set +e
set -xv
if [ ${K8S_AUTOCD} -gt 0 ];then
    for SVCNAME in ${K8S_SVCNAMES};do
        bash ${TRYTOP}/script/helm-gen/mk-app-chart.sh ${DOCKER_URL} ${SVCNAME} ${K8S_NS} ${SVC_PORTS} ${K8S_AUTOCD} ${K8S_DOMAIN_INTERNAL} ${K8S_DOMAIN_PUBLIC}
    done
fi
