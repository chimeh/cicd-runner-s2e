apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: "{{ template "xxxxxx.fullname" . }}"
  labels:
    app: "{{ template "xxxxxx.name" . }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: app
spec:
  {{- if .Values.xxxxxx.replicaCount }}
  replicas: {{ .Values.xxxxxx.replicaCount }}
  {{- end}}
  selector:
    matchLabels:
      app: {{ template "xxxxxx.name" . }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "xxxxxx.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
      - image: {{ .Values.xxxxxx.image }}
        imagePullPolicy: IfNotPresent
        name: {{ template "xxxxxx.name" . }}
        ports:
        {{- if .Values.xxxxxx.service.ports }}
        {{- range $port := .Values.xxxxxx.service.ports }}
        - name: {{ $port }}-TCP
          containerPort: {{ $port }}
          protocol: TCP
        {{- end}}
        {{- end}}
        resources:
          limits:
            memory: 1536Mi
          requests:
            memory: 256Mi
        securityContext:
          privileged: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /cfg/
          name: {{ template "xxxxxx.name" . }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 421
          items:
          - key: env.txt
            path: env.txt
          name: {{ template "xxxxxx.name" . }}
        name: {{ template "xxxxxx.name" . }}
